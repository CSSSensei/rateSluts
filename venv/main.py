#
#        _   _  _  _            _               _
#       | \ | |(_)| |          | |             | |
#       |  \| | _ | | __  ___  | |  ___  _ __  | | __  ___
#       | . ` || || |/ / / _ \ | | / _ \| '_ \ | |/ / / _ \
#       | |\  || ||   < | (_) || ||  __/| | | ||   < | (_) |
#       \_| \_/|_||_|\_\ \___/ |_| \___||_| |_||_|\_\ \___/
#                                _      _     _        _
#                               | |    (_)   (_)      (_)
#        _ __ ___    ___  _ __  | |__   _     _   ___  _  ___
#       | '_ ` _ \  / _ \| '_ \ | '_ \ | |   | | / __|| |/ __|
#       | | | | | ||  __/| |_) || | | || |   | || (__ | |\__ \
#       |_| |_| |_| \___|| .__/ |_| |_||_|   |_| \___||_||___/
#                        | |
#                        |_|

import asyncio
import calendar
import datetime
import os
from typing import List, Dict

import tzlocal
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv, find_dotenv
from aiogram.client.session.aiohttp import AiohttpSession
from sql_db import check_id, reduce_attempts, set_verified, add_girlphoto, get_users, get_last_commit, \
    add_current_state, get_current_state, add_to_queue, delete_from_queue, get_queue, get_usersinfo_db
from sql_photos import get_last, add_photo_id, add_rate, add_note, get_photo_id_by_id, get_note_sql, get_votes, \
    get_origin, max_photo_id_among_all, len_photos_by_username, max_photo_id_by_username, get_sluts_db
from graphics import get_statistics

load_dotenv(find_dotenv())

API_TOKEN: str = os.getenv('TOKEN')
channel_id = os.getenv('CHANNEL_ID')
storage: MemoryStorage = MemoryStorage()
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp: Dispatcher = Dispatcher(storage=storage)

emoji = {
    0: 'ü§¢',
    1: 'ü§Æ',
    2: 'üòí',
    3: 'üòï',
    4: 'üòî',
    5: 'üòê',
    6: 'üôÇ',
    7: 'üòä',
    8: 'ü•∞',
    9: 'üòò',
    10: 'üòç',
    11: 'üí¶'
}
rate = {
    11: '2D',
    10: '–ñ–µ–Ω–∞ (Mommy)',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è (—è –±—ã –µ–π –Ω–µ –¥–∞–ª)',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '–ß—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ...?',
    0: '–†–µ–±—è—Ç... –≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}
rate2 = {
    11: '2D',
    10: 'mommy',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '—Ö—É–∂–µ —á–µ–º –ø–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    0: '–≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}


class FSMFillForm(StatesGroup):
    inserting_password = State()
    verified = State()
    banned = State()
    sending_photo = State()
    inserting_comment = State()
    rating = State()


class RateCallBack(CallbackData, prefix="rating"):
    r: int
    photo_id: int
    mailing: int


send_slut_button: KeyboardButton = KeyboardButton(
    text='–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
statistics_button: KeyboardButton = KeyboardButton(
    text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ')
basic_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button]], resize_keyboard=True,
    one_time_keyboard=True)
no_comments_button: KeyboardButton = KeyboardButton(
    text='–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[no_comments_button]], resize_keyboard=True,
    one_time_keyboard=True)

cancel_photo: KeyboardButton = KeyboardButton(
    text='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ')
keyboard3: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[cancel_photo]], resize_keyboard=True,
    one_time_keyboard=True)


def get_rates_keyboard(num, mailing):
    array_buttons: list[list[InlineKeyboardButton]] = [[], []]
    for i in range(12):
        array_buttons[i // 6].append(InlineKeyboardButton(
            text=str(i) + f' {emoji[i]}',
            callback_data=RateCallBack(r=i, photo_id=num, mailing=mailing).pack()))
    markup = InlineKeyboardMarkup(
        inline_keyboard=array_buttons)
    return markup


@dp.callback_query(RateCallBack.filter())
async def filter_rates(callback: CallbackQuery,
                       callback_data: RateCallBack, state: FSMContext):
    num = callback_data.photo_id
    await callback.answer(text=rate[callback_data.r])
    mailing = callback_data.mailing
    votes = get_votes(num)
    flag = True
    if mailing and len(votes.keys()) == len(get_users()):
        flag = False  # FLag - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
    add_rate(num, callback.from_user.username, callback_data.r)
    delete_from_queue(callback.from_user.id, num)

    if mailing:
        await callback.message.delete()
        add_current_state(callback.from_user.id, 0, callback.from_user.username)
        votes = get_votes(num)
        if len(votes.keys()) == len(get_users()) and flag:
            avg = sum(votes.values()) / len(votes.keys())
            avg_str = '{:.2f}'.format(avg)
            user_rates = ''
            for key, value in votes.items():
                user_rates += f'@{key}: <i>{value}</i>\n'
            rounded = round(avg)
            note_str = get_note_sql(num)
            note_str = f': <b><i>{get_note_sql(num)}</i></b>\n\n' if note_str is not None else '\n\n'
            txt = f'–ê–≤—Ç–æ—Ä –ø–∏–∫—á–∏ <b>@{get_origin(num)}</b>' + note_str + "–û—Ü–µ–Ω–∫–∏ –∏–Ω—Ü–µ–ª–æ–≤:\n" + user_rates + '\n' f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: <b>{avg_str}</b>' + f'\n<i>#{rate2[rounded].replace(" ", "_")}</i>'
            await bot.send_photo(chat_id=channel_id, photo=get_photo_id_by_id(num), caption=txt)
        q = get_queue(callback.from_user.id)
        if len(q) == 0:
            return
        i = next(iter(q))
        await bot.send_photo(callback.from_user.id, get_photo_id_by_id(i),
                             reply_markup=get_rates_keyboard(num=i, mailing=1))
        add_current_state(callback.from_user.id, i, callback.from_user.username)
        add_to_queue(callback.from_user.id, i)
        return

    await callback.message.edit_text(f'–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É {callback_data.r} {emoji[callback_data.r]}')
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í–≤–µ–¥–∏ –∑–∞–º–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ª–∏–±–æ –Ω–∞–∂–º–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"',
                           reply_markup=keyboard2)
    await state.set_state(FSMFillForm.inserting_comment)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    result = check_id(user_id, username)
    if result[0]:
        await message.answer('–ù–∞—Ö—É—è —Ç—ã —Å—Ç–∞—Ä—Ç –Ω–∞–∂–∞–ª', reply_markup=basic_keyboard)
        await state.set_state(FSMFillForm.verified)
    else:
        if result[1] <= 0:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –ª–æ—à–∞—Ä–∞. –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à—É —Ç—É—Å–æ–≤–∫—É')
        await state.set_state(FSMFillForm.inserting_password)


@dp.message(Command(commands='password_yaincel'))
async def settings(message: Message, state: FSMContext):
    set_verified(message.from_user.id)
    await message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ –∏–Ω—Ü–µ–ª–æ–≤', reply_markup=basic_keyboard)
    await state.set_state(FSMFillForm.verified)


@dp.message(Command(commands='get_users_info_db'))
async def settings(message: Message, state: FSMContext):
    txt = map(str, get_usersinfo_db())
    txt = '\n'.join(txt)
    await message.answer(text=txt, reply_markup=basic_keyboard)


@dp.message(Command(commands='get_sluts_db'))
async def settings(message: Message, state: FSMContext):
    txt = map(str, get_sluts_db())
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(F.text == '—è–∏–Ω—Ü–µ–ª', StateFilter(FSMFillForm.inserting_password))
async def get_password(message: Message, state: FSMContext):
    set_verified(id=message.from_user.id)
    await message.answer(
        text='–õ–µ–≥–µ–Ω–¥–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ. –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Ñ–æ—Ç–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏',
        reply_markup=basic_keyboard)
    await state.set_state(FSMFillForm.verified)


@dp.message(F.text != '—è–∏–Ω—Ü–µ–ª', StateFilter(FSMFillForm.inserting_password))
async def wrong_password(message: Message, state: FSMContext):
    attempts = reduce_attempts(message.from_user.id)
    if attempts > 0:
        await message.answer(text=f'–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}')
    else:
        await message.answer(text='–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 5 —Ä–∞–∑. –ò–¥–∏ –Ω–∞ —Ö—É–π, –¥—Ä—É–∂–æ–∫')
        await state.set_state(FSMFillForm.banned)


@dp.message(F.photo, StateFilter(FSMFillForm.sending_photo))
async def get_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)  # —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    add_girlphoto(message.from_user.id, last_num + 1)
    # await bot.send_photo(message.chat.id, file_id)
    await message.answer(text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
                         reply_markup=get_rates_keyboard(last_num + 1, 0))
    await state.clear()


@dp.message(F.text == '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ', StateFilter(FSMFillForm.sending_photo))
async def send_photo(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–¢—ã –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)
    add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(~F.photo, StateFilter(FSMFillForm.sending_photo))
async def get_photo(message: Message, state: FSMContext):
    await message.answer(text='–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –¥–æ–ª–±–æ—ë–±?', reply_markup=keyboard3)


async def send_photo_to_users(origin_user, num: int):
    for user in get_users():
        if user == origin_user:
            continue
        add_to_queue(user, num)
        if get_current_state(user) != 0:
            continue
        add_current_state(user, num)
        await bot.send_photo(user, get_photo_id_by_id(num), reply_markup=get_rates_keyboard(num=num, mailing=1))


@dp.message(F.text == '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', StateFilter(FSMFillForm.inserting_comment))
async def get_no_notes(message: Message, state: FSMContext):
    await message.answer(text='–ó–∞–µ–±–∏—Å—å',
                         reply_markup=basic_keyboard)
    await send_photo_to_users(message.from_user.id, get_last_commit(message.from_user.id))
    await state.clear()
    add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(~F.text, StateFilter(FSMFillForm.inserting_comment))
async def get_no_notes(message: Message, state: FSMContext):
    await message.answer(text='–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏, –¥–æ–ª–±–æ—ë–±?',
                         reply_markup=keyboard2)


@dp.message(F.text, StateFilter(FSMFillForm.inserting_comment))
async def get_note_main(message: Message, state: FSMContext):
    add_note(get_last_commit(message.from_user.id), message.text)
    await message.answer(
        text=f'–û—Ö—É–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: <b><i>{message.text}</i></b>. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>',
        disable_web_page_preview=True, reply_markup=basic_keyboard)
    await send_photo_to_users(message.from_user.id, get_last_commit(message.from_user.id))
    await state.clear()
    add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(StateFilter(FSMFillForm.banned))
async def urbanned(message: Message, state: FSMContext):
    await message.answer(text='–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –¥–æ–ª–±–æ—ë–±')


@dp.message(F.text == '–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
async def send_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    await message.answer(text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ', reply_markup=keyboard3)
    await state.set_state(FSMFillForm.sending_photo)
    add_current_state(message.from_user.id, -1, message.from_user.username)


@dp.message(StateFilter(FSMFillForm.rating))
async def default_photo(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É, —Å—É–∫–∞!')


@dp.message(F.photo)
async def default_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)  # —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    add_girlphoto(message.from_user.id, last_num + 1)
    await message.answer(text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
                         reply_markup=get_rates_keyboard(last_num + 1, 0))
    await state.set_state(FSMFillForm.rating)
    add_current_state(message.from_user.id, -1, message.from_user.username)


@dp.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ', ~StateFilter(FSMFillForm.rating))
async def stat_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    if len_photos_by_username(message.from_user.username) > 0:
        username = message.from_user.username
        get_statistics(username)
        photo = FSInputFile(f'myplot_{username}.jpg')
        await bot.send_photo(photo=photo, chat_id=message.from_user.id)
        os.remove(f'myplot_{username}.jpg')
        await message.answer(
            text=f'–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ {len(get_votes(max_photo_id_by_username(username)).keys())}/{len(get_users())} —á–µ–ª–æ–≤–µ–∫')
    else:
        await message.answer(text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '—Å–ø–∞—Å–∏–±–æ' or message.text.lower() == '–æ—Ç –¥—É—à–∏' or message.text.lower() == '–±–ª–∞–≥–æ–¥–∞—Ä—é'))
async def u_r_wellcome(message):
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKShplAfTsN4pzL4pB_yuGKGksXz2oywACZQEAAnY3dj9hlcwZRAnaOjAE')


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '–∏–¥–∏ –Ω–∞—Ö—É–π' or message.text.lower() == '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π' or message.text.lower() == '–∏–¥–∏ –Ω–∞ —Ö—É–π'))
async def u_r_wellcome(message):
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKSrVlAiPwEKrocvOADTQWgKGACLGGlwAChAEAAnY3dj_hnFOGe-uonzAE')


@dp.message(lambda message: message.text is not None and message.text.lower() == '—è –≥–µ–π')
async def u_r_wellcome(message):
    await message.answer('—è –∑–Ω–∞—é')


@dp.message()
async def process_name_command(message: Message):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    await message.answer(text='—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ã', reply_markup=basic_keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    asyncio.run(main())
