#
#        _   _  _  _            _               _
#       | \ | |(_)| |          | |             | |
#       |  \| | _ | | __  ___  | |  ___  _ __  | | __  ___
#       | . ` || || |/ / / _ \ | | / _ \| '_ \ | |/ / / _ \
#       | |\  || ||   < | (_) || ||  __/| | | ||   < | (_) |
#       \_| \_/|_||_|\_\ \___/ |_| \___||_| |_||_|\_\ \___/
#                                _      _     _        _
#                               | |    (_)   (_)      (_)
#        _ __ ___    ___  _ __  | |__   _     _   ___  _  ___
#       | '_ ` _ \  / _ \| '_ \ | '_ \ | |   | | / __|| |/ __|
#       | | | | | ||  __/| |_) || | | || |   | || (__ | |\__ \
#       |_| |_| |_| \___|| .__/ |_| |_||_|   |_| \___||_||___/
#                        | |
#                        |_|

import asyncio
import calendar
import datetime
import os
from typing import List, Dict

import tzlocal
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter, BaseFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv, find_dotenv
from aiogram.client.session.aiohttp import AiohttpSession
from sql_db import check_id, reduce_attempts, set_verified, add_girlphoto, get_users, get_last_commit, \
    add_current_state, get_current_state, add_to_queue, delete_from_queue, get_queue, get_usersinfo_db, \
    get_username_by_id, insert_last_rate, get_last_rate, get_ban, delete_row, get_id_by_username
from sql_photos import get_last, add_photo_id, add_rate, add_note, get_photo_id_by_id, get_note_sql, get_votes, \
    get_origin, max_photo_id_among_all, len_photos_by_username, max_photo_id_by_username, get_sluts_db
from graphics import get_statistics
from weekly_rates import add_to_weekly, clear_db, get_weekly_db, get_weekly, weekly_cancel, weekly_resume, \
    get_weekly_db_info
from tier_list import draw_tier_list

load_dotenv(find_dotenv())

API_TOKEN: str = os.getenv('TOKEN')
channel_id = os.getenv('CHANNEL_ID')
storage: MemoryStorage = MemoryStorage()
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp: Dispatcher = Dispatcher(storage=storage)

emoji = {
    0: 'ü§¢',
    1: 'ü§Æ',
    2: 'üòí',
    3: 'üòï',
    4: 'üòî',
    5: 'üòê',
    6: 'üôÇ',
    7: 'üòä',
    8: 'ü•∞',
    9: 'üòò',
    10: 'üòç',
    11: 'üí¶'
}
rate = {
    11: '2D',
    10: '–ñ–µ–Ω–∞ (Mommy)',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è (—è –±—ã –µ–π –Ω–µ –¥–∞–ª)',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '–ß—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ...?',
    0: '–†–µ–±—è—Ç... –≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}
rate2 = {
    11: '2D',
    10: 'mommy',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '—Ö—É–∂–µ —á–µ–º –ø–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    0: '–≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}


class FSMFillForm(StatesGroup):
    inserting_password = State()
    verified = State()
    banned = State()
    sending_photo = State()
    rating = State()


class RateCallBack(CallbackData, prefix="rating"):
    r: int
    photo_id: int
    mailing: int


send_slut_button: KeyboardButton = KeyboardButton(
    text='–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
statistics_button: KeyboardButton = KeyboardButton(
    text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ')
edit_rate: KeyboardButton = KeyboardButton(
    text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É')
basic_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button], [edit_rate]], resize_keyboard=True,
    one_time_keyboard=True)

cancel_photo: KeyboardButton = KeyboardButton(
    text='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ')
keyboard3: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[cancel_photo]], resize_keyboard=True,
    one_time_keyboard=True)


class check_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:5] == 'del_'


@dp.message(F.text, check_username())
async def del_username(message):
    s = message.text[5:]
    result = delete_row(s)
    if result == 0:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{s}"</i> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')


def get_rates_keyboard(num, mailing):
    array_buttons: list[list[InlineKeyboardButton]] = [[], []]
    for i in range(12):
        array_buttons[i // 6].append(InlineKeyboardButton(
            text=str(i) + f' {emoji[i]}',
            callback_data=RateCallBack(r=i, photo_id=num, mailing=mailing).pack()))
    markup = InlineKeyboardMarkup(
        inline_keyboard=array_buttons)
    return markup


@dp.callback_query(RateCallBack.filter())
async def filter_rates(callback: CallbackQuery,
                       callback_data: RateCallBack, state: FSMContext):
    num = callback_data.photo_id
    await callback.answer(text=rate[callback_data.r])
    mailing = callback_data.mailing
    votes = get_votes(num)
    flag = True
    insert_last_rate(callback.from_user.id, num)
    if mailing and len(votes.keys()) == len(get_users()):
        flag = False  # FLag - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
    add_rate(num, callback.from_user.username, callback_data.r)
    delete_from_queue(callback.from_user.id, num)

    if mailing:
        await callback.message.delete()
        add_current_state(callback.from_user.id, 0, callback.from_user.username)
        votes = get_votes(num)
        if len(votes.keys()) + 1 == len(get_users()):
            voted = set(votes.keys())
            users = set()
            for i in get_users():
                users.add(get_username_by_id(i))
            last_username = next(iter((users - voted)))
            if last_username is not None and type(last_username) == str and len(last_username) > 0:
                if get_id_by_username(last_username) is not None:
                    bot.send_message(
                        text=f'<b>{last_username}</b>, –µ–±–∞—Ç—å —Ç–≤–æ–π —Ä–æ—Ç, –Ω–∞–∂–º–∏ —Ç—ã —ç—Ç—É –∫–Ω–æ–ø–æ—á–∫—É, –≤—Å—è –±–∞–Ω–¥–∞ –∏–Ω—Ü–µ–ª–æ–≤ —Ç–µ–±—è –æ–∂–∏–¥–∞–µ—Ç',
                        chat_id=get_id_by_username(last_username), reply_markup=basic_keyboard)

        if len(votes.keys()) == len(get_users()) and flag:

            avg = sum(votes.values()) / len(votes.keys())
            extra = ''
            spoiler = False
            if avg == 0:
                spoiler = True
                extra = '<b>üö®–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!üö®\n–£–±–µ—Ä–∏—Ç–µ –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ –¥–µ—Ç–µ–π –∏ –ª—é–¥–µ–π —Å —Ç–æ–Ω–∫–æ–π –¥—É—à–µ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π. –î–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –≤–∞—Å —à–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n</b>'
            if avg == 11:
                spoiler = True
                extra = '<b>üòç –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤ –æ—Ü–µ–Ω–∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ 11 üòç</b>\n\n'
            avg_str = '{:.2f}'.format(avg)
            user_rates = ''
            for key, value in votes.items():
                user_rates += f'@{key}: <i>{value}</i>\n'
            rounded = round(avg)
            note_str = get_note_sql(num)
            note_str = f': <b><i>{get_note_sql(num)}</i></b>\n\n' if note_str is not None else '\n\n'
            txt = extra + f'–ê–≤—Ç–æ—Ä –ø–∏–∫—á–∏ <b>@{get_origin(num)}</b>' + note_str + "–û—Ü–µ–Ω–∫–∏ –∏–Ω—Ü–µ–ª–æ–≤:\n" + user_rates + '\n' f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: <b>{avg_str}</b>' + f'\n<i>#{rate2[rounded].replace(" ", "_")}</i>'
            await bot.send_photo(chat_id=channel_id, photo=get_photo_id_by_id(num), caption=txt,
                                 has_spoiler=spoiler)
            add_to_weekly(get_photo_id_by_id(num), avg)
        q = get_queue(callback.from_user.id)
        if len(q) == 0:
            return
        i = next(iter(q))
        await bot.send_photo(callback.from_user.id, get_photo_id_by_id(i),
                             reply_markup=get_rates_keyboard(num=i, mailing=1))
        add_current_state(callback.from_user.id, i, callback.from_user.username)
        return

    await callback.message.edit_text(f'–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É {callback_data.r} {emoji[callback_data.r]}')
    add_current_state(callback.from_user.id, 0, callback.from_user.username)
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    result = check_id(user_id, username)
    if result[0]:
        await message.answer('–ù–∞—Ö—É—è —Ç—ã —Å—Ç–∞—Ä—Ç –Ω–∞–∂–∞–ª', reply_markup=basic_keyboard)
        await state.set_state(FSMFillForm.verified)
    else:
        if result[1] <= 0:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –ª–æ—à–∞—Ä–∞. –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à—É —Ç—É—Å–æ–≤–∫—É')
        await state.set_state(FSMFillForm.inserting_password)


@dp.message(Command(commands='password_yaincel'))
async def settings(message: Message, state: FSMContext):
    set_verified(message.from_user.id)
    await message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ –∏–Ω—Ü–µ–ª–æ–≤', reply_markup=basic_keyboard)
    await state.set_state(FSMFillForm.verified)


@dp.message(Command(commands='help'))
async def help(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    await message.answer(
        text='–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>. –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ".\n–ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ" –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≥—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ü–µ–Ω–æ–∫ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ.\n' + \
             '–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É –æ—à–∏–±–æ—á–Ω–æ? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É".\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ —Ñ–æ—Ç–æ, —Å–¥–µ–ª–∞–π –ø–æ–¥–ø–∏—Å—å –∫ –Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
        disable_web_page_preview=True, reply_markup=basic_keyboard)


@dp.message(Command(commands='get_users_info_db'))
async def send_users_db(message: Message, state: FSMContext):
    txt = map(str, get_usersinfo_db())
    txt = '\n'.join(txt)
    await message.answer(text=txt, reply_markup=basic_keyboard)


@dp.message(Command(commands='get_weekly_db'))
async def send_weekly_db(message: Message, state: FSMContext):
    txt = map(str, get_weekly_db_info())
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(Command(commands='weekly_off'))
async def weekly_cancel_func(message: Message, state: FSMContext):
    weekly_cancel(message.from_user.id)
    await message.answer(text='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–∏—Ä-–ª–∏—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞', reply_markup=basic_keyboard)


@dp.message(Command(commands='weekly_on'))
async def send_users_db_func(message: Message, state: FSMContext):
    weekly_resume(message.from_user.id)
    await message.answer(text='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–∏—Ä-–ª–∏—Å—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=basic_keyboard)


@dp.message(Command(commands='send_tier_list'))
async def send_tier_and_delete(message: Message, state: FSMContext):
    await weekly_tierlist()


@dp.message(Command(commands='send_tier_list_notdel'))
async def send_tier_list(message: Message, state: FSMContext):
    await weekly_tierlist(0)


@dp.message(Command(commands='get_ban'))
async def ban_user(message: Message, state: FSMContext):
    get_ban(message.from_user.id)
    await message.answer(text='–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤', reply_markup=ReplyKeyboardRemove())


@dp.message(Command(commands='get_sluts_db'))
async def send_sluts_db(message: Message, state: FSMContext):
    txt = map(str, get_sluts_db())
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(F.text == '—è–∏–Ω—Ü–µ–ª', StateFilter(FSMFillForm.inserting_password))
async def get_verified(message: Message, state: FSMContext):
    set_verified(id=message.from_user.id)
    await message.answer(
        text='–õ–µ–≥–µ–Ω–¥–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ –µ–≥–æ  —Å–º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, —Å–¥–µ–ª–∞–π –ø–æ–¥–ø–∏—Å—å –∫ –Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Ñ–æ—Ç–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏',
        reply_markup=basic_keyboard)
    await state.set_state(FSMFillForm.verified)


@dp.message(F.text != '—è–∏–Ω—Ü–µ–ª', StateFilter(FSMFillForm.inserting_password))
async def wrong_password(message: Message, state: FSMContext):
    attempts = reduce_attempts(message.from_user.id)
    if attempts > 0:
        await message.answer(text=f'–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}')
    else:
        await message.answer(text='–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 5 —Ä–∞–∑. –ò–¥–∏ –Ω–∞ —Ö—É–π, –¥—Ä—É–∂–æ–∫')
        await state.set_state(FSMFillForm.banned)


@dp.message(F.photo, StateFilter(FSMFillForm.sending_photo))
async def get_photo_by_button(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)  # —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    add_girlphoto(message.from_user.id, last_num + 1)
    # await bot.send_photo(message.chat.id, file_id)
    await message.answer(text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
                         reply_markup=get_rates_keyboard(last_num + 1, 0))
    add_current_state(message.from_user.id, -1, message.from_user.username)
    await state.clear()


@dp.message(F.text == '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ', StateFilter(FSMFillForm.sending_photo))
async def cancel_sending(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–¢—ã –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)
    add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(~F.photo, StateFilter(FSMFillForm.sending_photo))
async def invalid_type_photo(message: Message, state: FSMContext):
    await message.answer(text='–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –¥–æ–ª–±–æ—ë–±?', reply_markup=keyboard3)


async def send_photo_to_users(origin_user, num: int):
    for user in get_users():
        if user == origin_user:
            continue
        add_to_queue(user, num)
        if get_current_state(user) != 0:
            continue
        add_current_state(user, num)
        await bot.send_photo(user, get_photo_id_by_id(num), reply_markup=get_rates_keyboard(num=num, mailing=1))


# @dp.message(F.text, StateFilter(FSMFillForm.inserting_comment))
# async def get_note_main(message: Message, state: FSMContext):
#     add_note(get_last_commit(message.from_user.id), message.text)
#     await message.answer(
#         text=f'–û—Ö—É–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: <b><i>{message.text}</i></b>. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>',
#         disable_web_page_preview=True, reply_markup=basic_keyboard)
#     await send_photo_to_users(message.from_user.id, get_last_commit(message.from_user.id))
#     await state.clear()
#     add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(StateFilter(FSMFillForm.banned))
async def urbanned(message: Message, state: FSMContext):
    await message.answer(text='–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –¥–æ–ª–±–æ—ë–±')


@dp.message(F.text == '–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
async def send_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    await message.answer(text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ', reply_markup=keyboard3)
    await state.set_state(FSMFillForm.sending_photo)
    add_current_state(message.from_user.id, -1, message.from_user.username)


@dp.message(StateFilter(FSMFillForm.rating))
async def remember_to_rate(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É, —Å—É–∫–∞!')


@dp.message(F.photo)
async def default_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)  # —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    add_girlphoto(message.from_user.id, last_num + 1)

    if message.caption is not None:
        await message.answer(
            text=f'–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —Å –∑–∞–º–µ—Ç–∫–æ–π: <i>{message.caption}</i>. –û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
            reply_markup=get_rates_keyboard(last_num + 1, 0))
        add_note(last_num + 1, message.caption)
    else:
        await message.answer(
            text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
            reply_markup=get_rates_keyboard(last_num + 1, 0))
    await state.set_state(FSMFillForm.rating)
    add_current_state(message.from_user.id, -1, message.from_user.username)


@dp.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ', ~StateFilter(FSMFillForm.rating))
async def stat_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    if len_photos_by_username(message.from_user.username) > 0:
        username = message.from_user.username
        get_statistics(username)
        photo = FSInputFile(f'myplot_{username}.jpg')
        await bot.send_photo(photo=photo, chat_id=message.from_user.id)
        os.remove(f'myplot_{username}.jpg')
        await message.answer(
            text=f'–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ {len(get_votes(max_photo_id_by_username(username)).keys())}/{len(get_users())} —á–µ–ª–æ–≤–µ–∫')
    else:
        await message.answer(text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)


@dp.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É', ~StateFilter(FSMFillForm.rating))
async def stat_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    last_rate = get_last_rate(message.from_user.id)
    if last_rate == 0 or last_rate == 5:
        message.answer(text='–¢—ã –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª —á—É–∂–∏—Ö —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)
        return
    await bot.send_photo(chat_id=message.from_user.id, photo=get_photo_id_by_id(last_rate),
                         reply_markup=get_rates_keyboard(last_rate, 1), caption='–ù—É –¥–∞–≤–∞–π, –ø–µ—Ä–µ–æ–±—É–π—Å—è, —Ç–≤–∞—Ä—å')


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '—Å–ø–∞—Å–∏–±–æ' or message.text.lower() == '–æ—Ç –¥—É—à–∏' or message.text.lower() == '–±–ª–∞–≥–æ–¥–∞—Ä—é'))
async def u_r_wellcome(message):
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKShplAfTsN4pzL4pB_yuGKGksXz2oywACZQEAAnY3dj9hlcwZRAnaOjAE')


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '–∏–¥–∏ –Ω–∞—Ö—É–π' or message.text.lower() == '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π' or message.text.lower() == '–∏–¥–∏ –Ω–∞ —Ö—É–π'))
async def fuckoff(message):
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKSrVlAiPwEKrocvOADTQWgKGACLGGlwAChAEAAnY3dj_hnFOGe-uonzAE')


@dp.message(lambda message: message.text is not None and message.text.lower() == '—è –≥–µ–π')
async def ik(message):
    await message.answer('—è –∑–Ω–∞—é')


@dp.message()
async def every_message(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.inserting_password)
        return
    await message.answer(text='—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ã', reply_markup=basic_keyboard)


async def download():
    f = await bot.get_file(file_id)
    f_path = f.file_path
    await bot.download_file(f_path, "test.jpg")


async def weekly_tierlist(delete=1):
    if get_weekly(972753303):
        d = get_weekly_db()
        new_d = {}
        cnt = 1
        for key, values in d.items():
            for value in values:
                f = await bot.get_file(value)
                f_path = f.file_path
                await bot.download_file(f_path, f"test_{cnt}.jpg")
                new_d[key] = [f"test_{cnt}.jpg"] + new_d.get(key, [])
                cnt += 1
        draw_tier_list(new_d)
        for i in range(1, cnt):
            os.remove(f"test_{i}.jpg")
        photo = FSInputFile("tier_list.png")
        bot.send_document(document=photo, chat_id=channel_id, caption='<b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–∏—Ä –ª–∏—Å—Ç</b>')
        os.remove("tier_list.png")
        if delete:
            clear_db()


async def notify():
    for user in get_users():
        q = get_queue(user)
        if get_current_state(user) == -1:
            await bot.send_message(text='–ó–∞–≤–µ—Ä—à–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, —Å—É–∫–∞ ü§¨. –¢—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∂–µ —Ñ–æ—Ç–æ, –¥–æ–ª–±–æ–µ–±?')
            continue
        if len(q) == 0:
            continue
        await bot.send_message(chat_id=user, caption='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n<b>–æ—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, —Ç–≤–∞—Ä—å ü§¨</b>',
                               reply_markup=basic_keyboard)


async def main():
    scheduler: AsyncIOScheduler = AsyncIOScheduler(timezone=str(tzlocal.get_localzone()))
    scheduler.add_job(notify, trigger='cron', hour='9-22/3', minute=0)
    scheduler.start()

    scheduler2: AsyncIOScheduler = AsyncIOScheduler(timezone=str(tzlocal.get_localzone()))
    trigger = CronTrigger(day_of_week='sun', hour=20, minute=0)
    scheduler2.add_job(weekly_tierlist, trigger=trigger)
    scheduler2.start()

    await dp.start_polling(bot)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    asyncio.run(main())
