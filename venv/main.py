#
#                      \`*-.
#                       )  _`-.
#                      .  : `. .
#                      : _   '  \
#                      ; *` _.   `*-._
#                      `-.-'          `-.
#                        ;       `       `.
#                        :.       .        \
#                        . \  .   :   .-'   .
#                        '  `+.;  ;  '      :
#                        :  '  |    ;       ;-.
#                        ; '   : :`-:     _.`* ;
#                    .*' /  .*' ; .*`- +'  `*'
#                     `*-*   `*-*  `*-*'
#
#        _   _  _  _            _               _
#       | \ | |(_)| |          | |             | |
#       |  \| | _ | | __  ___  | |  ___  _ __  | | __  ___
#       | . ` || || |/ / / _ \ | | / _ \| '_ \ | |/ / / _ \
#       | |\  || ||   < | (_) || ||  __/| | | ||   < | (_) |
#       \_| \_/|_||_|\_\ \___/ |_| \___||_| |_||_|\_\ \___/
#                                _      _     _        _
#                               | |    (_)   (_)      (_)
#        _ __ ___    ___  _ __  | |__   _     _   ___  _  ___
#       | '_ ` _ \  / _ \| '_ \ | '_ \ | |   | | / __|| |/ __|
#       | | | | | ||  __/| |_) || | | || |   | || (__ | |\__ \
#       |_| |_| |_| \___|| .__/ |_| |_||_|   |_| \___||_||___/
#                        | |
#                        |_|

import asyncio
import calendar
import datetime
import io
import json
import os
import time
import shutil

import aiogram.utils.chat_action
import yadisk

import requests
import random
from typing import List, Dict, Union
from pathlib import Path

import tzlocal
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter, BaseFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InputMediaPhoto, InputMediaDocument, InputMediaVideo
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType,
                           MessageReactionUpdated)
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types.reaction_type_emoji import ReactionTypeEmoji
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv, find_dotenv
from aiogram.client.session.aiohttp import AiohttpSession
from sql_db import check_id, reduce_attempts, set_verified, add_girlphoto, get_users, get_last_commit, \
    add_current_state, get_current_state, add_to_queue, delete_from_queue, get_queue, get_usersinfo_db, \
    get_username_by_id, insert_last_rate, get_last_rate, get_ban, delete_row, get_id_by_username, check_user, \
    get_not_incel, check_new_user, change_queue, get_unban, add_new_birthday, get_birthday, get_top_incels
from sql_photos import *
from graphics import *
from weekly_rates import add_to_weekly, clear_db, get_weekly_db, get_weekly, weekly_cancel, weekly_resume, \
    get_weekly_db_info, get_min_from_public_info, add_to_queue_public_info, delete_from_queue_public_info, public_queue
from tier_list import draw_tier_list
from statham import get_randQuote, insert_quote, get_statham_db, del_quote
from administrators import *
from parser import *
from cv_color import *

load_dotenv(find_dotenv())

API_TOKEN: str = os.getenv('TOKEN')
channel_id = os.getenv('CHANNEL_ID')
channel_id_public = os.getenv('CHANNEL_ID_public')
ya_token = os.getenv('YAtoken')
storage: MemoryStorage = MemoryStorage()

bot: Bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp: Dispatcher = Dispatcher(storage=storage)
current_dm_id = {}
states_users = {}
caption_global = {}
legendary_quote = '–ù–∞–∑–≤–∞–ª—Å—è –≥—Ä—É–∑–¥–µ–º ‚Äî –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–ù–µ —Å–¥–µ–ª–∞–ª –¥–µ–ª–æ ‚Äî –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–ò –±–∞–±–∞ —Å –≤–æ–∑—É –ø–æ—à–ª–∞ –Ω–∞ —Ö—É–π\n–ò –≤–æ–ª–∫–∏ –Ω–∞ —Ö—É–π, –∏ –æ–≤—Ü—ã –Ω–∞ —Ö—É–π\n\n–•–æ—Ç–µ–ª –∫–∞–∫ –ª—É—á—à–µ, –∞ –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–î–∞—é—Ç ‚Äî –±–µ—Ä–∏, –∞ –±—å—é—Ç ‚Äî –∏–¥–∏ –Ω–∞ —Ö—É–π\n–î—Ä—É–∂–±–∞ –¥—Ä—É–∂–±–æ–π, –∞ –Ω–∞ —Ö—É–π –∏–¥–∏\n–ß—å—è –±—ã –∫–æ—Ä–æ–≤–∞ –º—ã—á–∞–ª–∞, –∞ —Ç–≤–æ—è –ø–æ—à–ª–∞ –Ω–∞ —Ö—É–π\n\n–£—á–µ–Ω—å–µ —Å–≤–µ—Ç, –∞ —Ç—ã –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–°–µ–º—å —Ä–∞–∑ –æ—Ç–º–µ—Ä—å –∏ –∏–¥–∏ –Ω–∞ —Ö—É–π\n–°–∫–∞–∂–∏ –º–Ω–µ –∫—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥, –∏ –æ–±–∞ –Ω–∞ —Ö—É–π\n–ß–µ–º –±—ã –¥–∏—Ç—è –Ω–µ —Ç–µ—à–∏–ª–æ—Å—å, –∞ —à–ª–æ –±—ã –Ω–∞ —Ö—É–π\n\n–ü—Ä–∏—à–ª–∞ –±–µ–¥–∞ ‚Äî –ø–æ—à–ª–∞ –Ω–∞ —Ö—É–π!\n–ì–æ—Ç–æ–≤—å —Å–∞–Ω–∏ –ª–µ—Ç–æ–º, –∞ –∑–∏–º–æ–π –Ω–∞ —Öy–π –∏–¥–∏!\n–°–æ —Å–≤–æ–∏–º —É—Å—Ç–∞–≤–æ–º –∏–¥–∏ –Ω–∞ —Ö—É–π!\n–ò–¥–∏ –Ω–∞ —Ö—É–π –Ω–µ –æ—Ç—Ö–æ–¥—è –æ—Ç –∫–∞—Å—Å—ã!'
hz_answers = ['–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...', '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ —á–µ–º —Ç—ã', '–ß—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É? üßê', '–Ø –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ ü§®',
              '–ù–µ —É–ª–∞–≤–ª–∏–≤–∞—é —Å–º—ã—Å–ª–∞ üôÉ', '–ß—Ç–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Å–∫–∞–∑–∞—Ç—å‚ùì', '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è üòï',
              'ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω–∏–º–∞—é ü§∑‚Äç‚ôÄÔ∏è']
emoji_lol = ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü´õ', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂', 'ü´ë',
             'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü´ö', 'ü•ê', 'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'üå≠', 'üçî', 'üçü', 'üçï', 'ü•™', 'ü•ô', 'üßÜ',
             'üåÆ', 'üåØ', 'ü´î', 'ü•ó', 'ü•ò', 'ü´ï', 'ü•´', 'üçù', 'üçú', 'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'ü¶™', 'üç§', 'üçô', 'üçö', 'üçò', 'üç•', 'ü•†', 'ü•Æ', 'üç°', 'üçß', 'üç®', 'üç¶',
             'ü•ß', 'üßÅ', 'üç∞', 'üéÇ', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™', 'üå∞', 'üçØ', 'ü•õ', 'ü´ó', 'üçº', 'ü´ñ', '‚òïÔ∏è', 'üçµ', 'üßÉ', 'ü•§', 'üßã', 'üç∂', 'üçæ', 'üßä', '‚öΩÔ∏è',
             'üèÄ', 'üèà', '‚öæÔ∏è', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üéß', 'üé´', 'üéü', 'üé≤', '‚ôü', 'üéØ', 'üé≥', 'üéÆ', 'üé∞', 'üß©', 'üóæ', 'üéë', 'üèû', 'üåÖ',
             'üåÑ', 'üå†', 'üéá', 'üéÜ', 'üåá', 'üåÜ', 'üèô', 'üåÉ', 'üåå', 'üåâ', 'üåÅ', 'üí£', 'üß®', 'üíä', 'üéÅ', 'üéà', 'üõç', 'ü™©', 'üìñ', 'üìö', 'üìô', 'üìò', 'üìó', 'üìï', 'üìí', 'üìî',
             'üìì', 'üì∞', 'üóû', 'üßµ', 'üëö', 'üëï', 'üëñ', 'üëî', 'üíº', 'üëú', 'üé©', 'üß¢', 'üëí', 'üéì', 'üß≥', 'üëì', 'üï∂', 'ü•Ω', 'üåÇ', 'üíç', 'üê∂', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª',
             'üêº', 'üêª‚Äç‚ùÑÔ∏è', 'üê®', 'üêØ', 'ü¶Å', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí', 'üê±', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü™ø', 'ü¶Ü', 'üê¶‚Äç‚¨õÔ∏è', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫',
             'üê¥', 'ü¶Ñ', 'üêù', 'ü¶ã', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë', 'ü™º', 'ü¶ê', 'üê¨', 'üêã', 'üê≥', 'ü¶à', 'ü¶≠', 'ü™Ω', 'üïä', 'ü™∂', 'üêâ', 'üê≤', 'ü¶î', 'üêÅ', 'üåµ', 'üéÑ', 'üå≤', 'üå≥',
             'üå¥', 'ü™µ', 'üå±', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üéç', 'ü™¥', 'üéã', 'üçÉ', 'üçÇ', 'üçÅ', 'ü™∫', 'üêö', 'ü™∏', 'ü™®', 'üåæ', 'üíê', 'üå∑', 'üåπ', 'ü•Ä', 'ü™ª', 'ü™∑', 'üå∫', 'üå∏', 'üåº',
             'üåª', 'üåé', 'üåç', 'üåè', 'ü™ê', 'üí´', '‚≠êÔ∏è', '‚ú®', 'üí•', 'üî•', 'üå™', 'üåà', '‚òÄÔ∏è', 'üå§', '‚õÖÔ∏è', 'üå•', '‚òÅÔ∏è', '‚òÉÔ∏è', '‚õÑÔ∏è', 'üí®', '‚òÇÔ∏è', 'üåä', 'üå´']
emoji_banned = '‚õî‚ùóü§Øüò≥‚ùå‚≠ïüõëüìõüö´üí¢üö∑üìµüî¥üü•üí£üóøüêìüôäüôâüôàüê∑ü´µü•≤üôÅüòïüòüüòîüòûüòßüò¶üòØüôÑüòµüíÄüö®üòê'
dice_points = {'üé≤': 6, 'üéØ': 6, 'üé≥': 6, 'üèÄ': 4, '‚öΩ': 3, 'üé∞': 64}
replicas = {}
with open('replicas.txt', 'r', encoding='utf-8') as file:
    replicas = json.load(file)
emoji = {
    0: 'ü§¢',
    1: 'ü§Æ',
    2: 'üòí',
    3: 'üòï',
    4: 'üòî',
    5: 'üòê',
    6: 'üôÇ',
    7: 'üòä',
    8: 'ü•∞',
    9: 'üòò',
    10: 'üòç',
    11: 'üí¶'
}
rate = {
    11: '2D',
    10: '–ñ–µ–Ω–∞ (Mommy)',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è (—è –±—ã –µ–π –Ω–µ –¥–∞–ª)',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '–ß—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ...?',
    0: '–†–µ–±—è—Ç... –≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}
rate2 = {
    11: '2D',
    10: 'mommy',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '—Ö—É–∂–µ —á–µ–º –ø–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    0: '–≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}

rate3 = {
    10: '#–ë–æ–≥–∏–Ω—è',
    9: '#–®–æ–∫–æ–ª–∞–¥–Ω–∞—è',
    8: '#–í–∞—à–µ–π_–º–∞–º–µ_–∑—è—Ç—å_–Ω–µ_–Ω—É–∂–µ–Ω<a href="https://t.me/RatePhotosBot">?</a>',
    7: '#–ü—Ä–µ–ª–µ—Å—Ç—å',
    6: '#–ù–∞–π—Å',
    5: '#–ú–∏–ª–æ',
    4: '#–ù–∞_–ª—é–±–∏—Ç–µ–ª—è',
    3: '#–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ',
    2: '#C—Ç—Ä–∞—à–Ω–æ–µ',
    1: '#–§—É',
    0: '#–ö–∞–Ω–¥–∏–¥–∞—Ç_–æ—Ç_–æ–ø–ø–æ–∑–∏—Ü–∏–∏'
}
incels = get_users()

class FSMFillForm(StatesGroup):
    verified = State()
    banned = State()
    sending_photo = State()
    rating = State()
    sendDM = State()
    sendQuote = State()
    inserting_url = State()
    inserting_caption = State()
    inserting_hour = State()
    inserting_minute = State()


class RateCallBack(CallbackData, prefix="rating"):
    r: int
    photo_id: int
    mailing: int

class ModerateCallBack(CallbackData, prefix="moderate"):
    action: int
    photo_id: int
    creator: str


class GroupCallBack(CallbackData, prefix="group"):
    group_id: int


class GroupSettings(CallbackData, prefix="public_settings"):
    action: int
    group_id: int
    amount: int = 0
    date: int = 0


class NotifySettings(CallbackData, prefix="notify"):
    action: int
    week: int = 0
    hour: int = 0
    minute: int = 0


class AdminCallBack(CallbackData, prefix="admin"):
    action: int
    user_id: int = 0


class ConfirmCallBack(CallbackData, prefix="confirm"):
    action: int
    photo_id: int = 0


class ManageSettings(CallbackData, prefix="manage"):
    action: int
    photo_id: Union[int, str] = 0
    back_ids: Union[int, str] = 0
    message_to_delete: Union[int, str] = 0


send_slut_button: KeyboardButton = KeyboardButton(
    text='–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
statistics_button: KeyboardButton = KeyboardButton(
    text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
edit_rate: KeyboardButton = KeyboardButton(
    text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É ‚úèÔ∏è')
quote_button: KeyboardButton = KeyboardButton(
    text='–¶–∏—Ç–∞—Ç–∞ üí¨')
settings_button: KeyboardButton = KeyboardButton(
    text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
resend: KeyboardButton = KeyboardButton(
    text='–§–æ—Ç–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ üåÜ')
basic_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button, quote_button], [edit_rate, resend]], resize_keyboard=True)
admin_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button, quote_button], [edit_rate, resend], [settings_button]], resize_keyboard=True)
not_incel_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button]], resize_keyboard=True)

cancel_photo: KeyboardButton = KeyboardButton(
    text='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ')
keyboard3: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[cancel_photo]], resize_keyboard=True,
    one_time_keyboard=True)


class check_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:5] == 'del_'


class ban_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:5] == 'ban_'


class unban_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:7] == 'unban_'


class add_birthday_command(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:13] == 'add_birthday'


class clear_states_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:4] == 'cs_'


class change_queue_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:4] == 'cq_'


class change_average_filter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:6] == 'cavg_'



class send_DM(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:6] == 'send_'


@dp.message(StateFilter(FSMFillForm.banned))
async def urbanned(message: Message, state: FSMContext):
    await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                         reply_markup=ReplyKeyboardRemove())


def get_keyboard(user_id: int):
    if user_id in get_admins():
        return admin_keyboard
    elif user_id in get_users():
        return basic_keyboard
    if len(get_avgs_not_incel(user_id)) > 5:
        return not_incel_keyboard
    return None


@dp.message(F.text, ban_username())
async def ban_username_command(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!', reply_markup=get_keyboard(message.from_user.id))
        return
    s = message.text[5:]
    delete_row_in_average(get_id_by_username(s))
    result = get_ban(get_id_by_username(s))
    if result == 0:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username: <i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>@{s}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω! –ù–∞—Ö—É–π –µ–≥–æ!')


@dp.message(F.text, unban_username())
async def unban_username_command(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!', reply_markup=get_keyboard(message.from_user.id))
        return
    s = message.text[7:]
    result = get_unban(get_id_by_username(s))
    if result == 0:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>@{s}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω! –ó—Ä—è...')


@dp.message(F.text, add_birthday_command(), F.from_user.id.in_(incels))
async def add_birthday_func(message: Message):
    pattern = r"/add_birthday_(\w+)_(\d{4}-\d{2}-\d{2})"
    match = re.match(pattern, message.text)
    if match:
        username = match.group(1)
        date = match.group(2)
        try:
            add_new_birthday(get_id_by_username(username), int(datetime.datetime.strptime(date, '%Y-%m-%d').timestamp()))
            await message.answer(f'–¢—ã –¥–æ–±–∞–≤–∏–ª –î–† <i>{date}</i> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{username}</b>')
        except Exception as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@dp.message(F.text, clear_states_username())
async def clear_state_username(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!', reply_markup=get_keyboard(message.from_user.id))
        return
    s = message.text[4:]
    try:
        add_current_state(id=get_id_by_username(s), num=0)
        await message.answer(text=f'–°–æ—Å—Ç–æ—è–Ω–∏–µ {s} –æ—á–∏—â–µ–Ω–æ ü´°')
    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 11\n{e}')


@dp.message(F.text, change_queue_username())
async def change_queue_command(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!', reply_markup=get_keyboard(message.from_user.id))
        return
    s = message.text[4:]
    try:
        username = s[:s.find('\n')]
        new_queue = s[s.find('\n') + 1:]
        change_queue(get_id_by_username(username), new_queue)
        await message.answer(f'–û—á–µ—Ä–µ–¥—å –¥–ª—è {username} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_queue}')

    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 11\n{e}')


@dp.message(F.text, change_average_filter())
async def change_average_command(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!', reply_markup=get_keyboard(message.from_user.id))
        return
    pattern = r'/(\w+)_([\w\d]+)_([\d]+)_([\d]+)'
    match = re.match(pattern, message.text)

    if match:
        try:
            username = match.group(2)
            sum_value = int(match.group(3))
            amount = int(match.group(4))
            user_id = get_id_by_username(username)
            if user_id is None or sum_value <= 0 or amount <= 0:
                await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –¢—ã –µ–±–ª–∞–Ω')
                return
            change_avg_rate(user_id, sum_value, amount)
            await message.answer(f'–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {username} –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {sum_value}, {amount}')
        except Exception as e:
            await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –¢—ã –µ–±–ª–∞–Ω\n{e}')
    else:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω')


@dp.message(Command(commands='new_quote'), F.from_user.id.in_(incels))
async def send_quote_dada(message: Message, state: FSMContext):
    incels = get_users()
    await message.answer(text='–ü—Ä–∏—à–ª–∏ —Ü–∏—Ç–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞')
    await state.set_state(FSMFillForm.sendQuote)

cnt = 1

@dp.message(Command(commands='test'), F.from_user.id.in_(incels))
async def test_something(message: Message):
    #await message.answer(text='–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π')
    await message.answer_photo(photo=get_photo_id_by_id(random.randint(1,1970)), reply_markup=
            InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ï—â–µ', callback_data='more1')]]))
    global cnt
    cnt += 1


@dp.callback_query(F.data == 'more1')
async def more1(callback: CallbackQuery):
    global cnt
    await callback.message.edit_media(media=InputMediaPhoto(media=get_photo_id_by_id(random.randint(1,1970))), reply_markup=
            InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ï—â–µ', callback_data='more1')]]))
    cnt+=1


@dp.message(Command(commands='send_tier_list'), F.from_user.id.in_(incels))
async def send_tier_and_delete(message: Message, state: FSMContext):
    incels = get_users()
    await message.answer(text='–¢–∏—Ä –ª–∏—Å—Ç –Ω–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...')
    await weekly_tierlist(message.from_user.id)


@dp.message(Command(commands='stat'))
async def send_tier_and_delete(message: Message, state: FSMContext):
    await stat_photo(message, state)


# @dp.message(Command(commands='sex'))
# async def send_tier_and_delete(message: Message, state: FSMContext):
#     pass


@dp.message(Command(commands='delete_tier_list'))
async def send_tier_and_delete(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        array = [[InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å! –Ø –ö–û–ù–ß! üòà',callback_data='ya_gay_delete_tier_db'),
                  InlineKeyboardButton(text='–ù–µ —É–¥–∞–ª—è—Ç—å ‚ùå',callback_data='not_delete')]]
        await message.answer(
            text='<b>–í–°–Ø –ë–î –ë–£–î–ï–¢ –°–¢–ï–†–¢–ê! –¢—ã —É–≤–µ—Ä–µ–Ω?</b>\n<span class="tg-spoiler">–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–∏–∑–¥—ã!</span>',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=array))


@dp.message(Command(commands='upd_file'))
async def update_replicas_file(message: Message, state: FSMContext):
    global replicas
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        if message.document and message.document.mime_type == 'text/plain':
            f = await bot.get_file(message.document.file_id)
            f_path = f.file_path
            await bot.download_file(file_path=f_path, destination='replicas2.txt')
            try:
                with open('replicas2.txt', 'r', encoding='utf-8') as file:
                    replicas = json.load(file)
                shutil.copyfile('replicas2.txt', 'replicas.txt')
                os.remove('replicas2.txt')
                await message.answer('–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
            except Exception as e:
                await bot.send_message(chat_id=972753303,
                                       text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ <i>"replicas.txt"</i>\n{e}')
        else:
            await message.answer('‚ùóÔ∏è–¢—ã –∑–∞–±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª –Ω–µ —Ç–æ–≥–æ —Ç–∏–ø–∞')


@dp.callback_query(F.data.in_(['ya_gay_delete_tier_db',
                               'not_delete']))
async def permanently_delete_db(callback: CallbackQuery):
    if callback.data == 'ya_gay_delete_tier_db':
        await callback.message.answer(text='<b>üíÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ç–∫–∞–º–∏ —Ç–∏—Ä –ª–∏—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n\n–ê–¥–º–∏–Ω –¥–∞—Å—Ç —Ç–µ–±–µ –ø–∏–∑–¥—ã!')
        clear_db()
    else:
        await callback.message.answer(text='–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–≤—Ä–µ–¥–∏–º–∞ üëç')
    await callback.message.edit_reply_markup(reply_markup=None)


@dp.message(F.text, send_DM(), F.from_user.id.in_(incels))
async def send_dm(message: Message, state: FSMContext):
    s = message.text[6:]
    if s == "all":
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ <b>–≤—Å–µ–º –±–æ–º–∂–∞–º</b>')
        current_dm_id[message.from_user.id] = -1
        await state.set_state(FSMFillForm.sendDM)
        return
    if s == "incels":
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ <b>–≤—Å–µ–º –∏–Ω—Ü–µ–ª–∞–º</b>')
        current_dm_id[message.from_user.id] = -2
        await state.set_state(FSMFillForm.sendDM)
        return
    if s == "topincels":
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ <b>—Ç–æ–ø –∏–Ω—Ü–µ–ª–∞–º</b>')
        current_dm_id[message.from_user.id] = -3
        await state.set_state(FSMFillForm.sendDM)
        return
    if len(s) <= 2:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username: <i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ')
        return
    result = check_user(s)
    if result is None:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username: <i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ <i>@{s}</i>')
        current_dm_id[message.from_user.id] = result
        await state.set_state(FSMFillForm.sendDM)


@dp.message(F.text, check_username())
async def del_username(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
        return
    s = message.text[5:]
    result = delete_row(s)
    if result == 0:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username: <i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username: <i>"{s}"</i> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')


def get_rates_keyboard(num: int, mailing: int = 1, ids='0', back=False, message_to_delete=0, back_ids=0, delete=True):
    array_buttons: list[list[InlineKeyboardButton]] = [[], []]
    if back:
        array_buttons = [[InlineKeyboardButton(text='üîô',
                                               callback_data=ManageSettings(action=8, photo_id=ids, message_to_delete=message_to_delete,
                                                                            back_ids=back_ids).pack())]]
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    for i in range(12):
        array_buttons[i // 6].append(InlineKeyboardButton(
            text=str(i) + f' {emoji[i]}',
            callback_data=RateCallBack(r=i, photo_id=num, mailing=mailing).pack()))

    if mailing == 3:
        if delete:
            add_note(num, '')
        array_buttons.append([
            InlineKeyboardButton(text='üîô', callback_data=ManageSettings(action=8, photo_id=ids, message_to_delete=message_to_delete,
                                                                        back_ids=back_ids).pack())])
    markup = InlineKeyboardMarkup(inline_keyboard=array_buttons)
    return markup


async def send_results(num: int, rate: str):
    origin = get_origin(num)
    origin_id = check_user(origin)
    if origin_id not in get_users():
        add_not_incel_photo(num, get_photo_id_by_id(num), origin_id, float(rate))
        if origin_id is not None:
            if float(rate) <= 5:
                emoji_loc = 'üìâ'
            else:
                emoji_loc = 'üìà'
            caption = f'{emoji_loc} –¢–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–µ–Ω–æ –Ω–∞ <b>{rate}</b> –∏–∑ <b>10</b>\n\n‚ù§Ô∏è <i>–≠—Ç–æ –Ω–µ –º–æ—ë –º–Ω–µ–Ω–∏–µ –∏ –Ω–µ –º–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã RatePhotosBot. –ù–µ —Å—É–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ –∑–∞ –æ—à–∏–±–∫–∏ ‚Äî —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å</i>'
            try:
                await bot.send_photo(chat_id=origin_id, photo=get_photo_id_by_id(num), caption=caption, reply_markup=get_keyboard(origin_id))
                if len(get_avgs_not_incel(origin_id)) == 6:
                    await bot.send_message('üôÄ –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!\n–ù–∞–∂–∏–º–∞–π —Å–∫–æ—Ä–µ–µ <i>/stat</i>', reply_markup=not_incel_keyboard)
            except Exception as e:
                await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')


async def send_group_photo(user_id: int, num: str):
    if '-' not in num:
        async with ChatActionSender(bot=bot, chat_id=user_id, action='upload_photo'):
            photo = send_photos_by_id(int(num))
            caption = f'üë• <b><a href="vk.com/{photo[1]}">{get_group_name(photo[1][:photo[1].find("?")])}</a></b>'
            msg = await bot.send_photo(chat_id=user_id, photo=photo[3], caption=photo[2] + ("\n\n" if len(photo[2]) > 0 else "") + caption,
                                       reply_markup=get_manage_photo(ids=int(num)))
            set_message_to_delete(user_id, f'{msg.message_id}')

        return
    num = list(map(int, num.split('-')))
    nums = [i for i in range(num[0], num[1] + 1)]
    photo = send_photos_by_id(nums[0])
    caption = f'üë• <b><a href="vk.com/{photo[1]}">{get_group_name(photo[1][:photo[1].find("?")])}</a></b>'
    media = []
    for num in nums:
        loc_photo = send_photos_by_id(num)
        media.append(InputMediaPhoto(media=loc_photo[3]))
    try:
        async with ChatActionSender(bot=bot, chat_id=user_id, action='upload_photo'):
            msg: List[Message] = await bot.send_media_group(user_id, media=media)
            await bot.send_message(chat_id=user_id, text=photo[2] + ("\n\n" if len(photo[2]) > 0 else "") + caption,
                                   reply_markup=get_manage_photo(ids=nums, message_to_delete=f'{msg[0].message_id}, {msg[-1].message_id}'),
                                   disable_web_page_preview=True)
            set_message_to_delete(user_id, f'{msg[0].message_id}-{msg[-1].message_id}')
    except Exception as e:
        await bot.send_message(chat_id=user_id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 1\n{e}')


async def notify_admin(user_id: int, message_id=0):
    sets = get_settings(user_id)
    if sets[6] is not None:
        groups_set = set(map(int, sets[6].split(',')))
        if message_id != 0:
            async with ChatActionSender(bot=bot, chat_id=user_id):
                await bot.edit_message_caption(chat_id=user_id, message_id=message_id,
                                               caption=f'–ù–∞—á–∞–ª –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –ø–æ –≥—Ä—É–ø–ø–∞–º\n<code>{"0".rjust(len(str(len(groups_set))))} –∏–∑ {len(groups_set)}</code>  | <code>{("{:2.2f}".format(00.00) + "%").rjust(6)}</code>')
        cnt_group = 0
        cnt = 0
        for group in groups_set:
            group_sets = get_group_sets(group)
            if message_id != 0:
                progress = cnt_group / len(groups_set)
                async with ChatActionSender(bot=bot, chat_id=user_id):
                    await bot.edit_message_media(chat_id=user_id, message_id=message_id,
                                                 media=InputMediaPhoto(media=group_sets[8],
                                                                       caption=f'–ù–∞—á–∞–ª –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –ø–æ –≥—Ä—É–ø–ø–∞–º\n<code>{str(cnt_group).rjust(len(str(len(groups_set))))} –∏–∑ {len(groups_set)}</code>  | <code>{("{:.2f}".format(progress * 100) + "%").rjust(6)}</code>\n<i>{group_sets[7]}</i>'))
            cnt_group += 1
            if not group_sets[2]:
                continue
            parameters = {'domain': group_sets[1], 'top_likes': group_sets[3], 'photo_amount': group_sets[4],
                          'time_delta': group_sets[5], 'last_update': group_sets[6] if group_sets[6] is not None else 0}
            try:
                result = get_posts(parameters)
            except Exception as e:
                await bot.send_message(chat_id=user_id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 2\n{e}')
            for link, post in result.items():
                async with ChatActionSender(bot=bot, chat_id=user_id,
                                            action='upload_photo'):  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ action "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...
                    cnt += 1
                    caption = f'üë• <b><a href="vk.com/{group_sets[1]}?w=wall{link}">{group_sets[7]}</a></b>, üëç {post[2]}'
                    if len(post[0]) == 1:
                        num = last_group_photo_id() + 1
                        if sets[7] != 2:
                            add_group_photo(num, f"{group_sets[1]}?w=wall{link}",
                                            format_text(post[1], group_sets[1], link), post[0][0])
                            if cnt == 1:
                                await send_group_photo(user_id, str(num))
                            else:
                                add_to_queue_group_photo(user_id, str(num))
                        else:
                            await bot.send_photo(chat_id=user_id, photo=post[0][0],
                                                 caption=format_text(post[1], group_sets[1], link) + (
                                                     "\n\n" if len(post[1]) > 0 else "") + caption,
                                                 reply_markup=get_manage_photo(ids=num, mode=sets[7]))
                    else:
                        photo_ids = []
                        media = []
                        first = True
                        num = last_group_photo_id()
                        for url in post[0]:
                            num += 1
                            if sets[7] != 2:
                                add_group_photo(num, f"{group_sets[1]}?w=wall{link}",
                                                format_text(post[1], group_sets[1], link), url)
                            photo_ids.append(num)
                            if first and sets[7] == 2:
                                media.append(
                                    InputMediaPhoto(media=url, caption=format_text(post[1], group_sets[1], link) + (
                                        "\n\n" if len(post[1]) > 1 else "") + caption))
                                first = False
                            else:
                                media.append(InputMediaPhoto(media=url))
                        try:
                            if sets[7] == 1:
                                if cnt == 1:
                                    await send_group_photo(user_id, f'{photo_ids[0]}-{photo_ids[-1]}')
                                else:
                                    add_to_queue_group_photo(user_id, f'{photo_ids[0]}-{photo_ids[-1]}')
                            else:
                                async with ChatActionSender(bot=bot, chat_id=user_id, action='upload_photo'):
                                    await bot.send_media_group(user_id, media=media)
                        except Exception as e:
                            await bot.send_message(chat_id=user_id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 3\n{e}')
            update_time(group)
        if cnt == 0:
            if len(get_admins_queue(user_id)) == 0:
                await bot.send_message(chat_id=user_id, text=f'–§–æ—Ç–æ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å üò®')
            else:
                await send_next_photo(user_id)
        if message_id != 0:
            async with ChatActionSender(bot=bot, chat_id=user_id):
                await bot.edit_message_media(chat_id=user_id, message_id=message_id,
                                             media=InputMediaPhoto(
                                                 media='https://sun1-86.userapi.com/s/v1/if1/hNz4gzygw7cug2Vg2fnASFV8jj5B8xeo4MdVvujz767OUMdDE5TJnxR07wNSeCwszzDwI-5r.jpg?size=200x200&quality=96&crop=0,0,300,300&ava=1',
                                                 caption=f'–ö–æ–Ω—á–∏–ª –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –ø–æ –≥—Ä—É–ø–ø–∞–º\n<code>{len(groups_set)} –∏–∑ {len(groups_set)}</code> | <code>100.00%</code>'))
                await asyncio.sleep(5)
                await bot.delete_message(chat_id=user_id, message_id=message_id)


def get_text_of_settings(user_id: int) -> str:
    sets = get_settings(user_id)
    extra_emoji = 'üßä' if sets[7] == 2 else ''
    text = f'<b>‚öôÔ∏è{extra_emoji} –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n<blockquote>'
    groups_str = ''
    if sets[6] is not None:
        text += '<b>–ì—Ä—É–ø–ø—ã:\n</b>üîÑ    üî¢    üìÖ     <i>–Ω–∞–∑–≤–∞–Ω–∏–µ\n'
        groups_set = set(map(int, sets[6].split(',')))
        for group in groups_set:
            settings = get_group_sets(group)
            if not settings[2]:
                continue
            text += ['üÜï      ', 'üëç      '][settings[3]] + str(settings[4]).ljust(9) + str(settings[5]).ljust(8) + f'<a href = "https://vk.com/{get_group_domain(group)}">{get_group_name(group)}</a>\n'
        text += '</i>'
    else:
        groups_str = '<i>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø!</i>\n'
    week_array = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
    weekday_str = ''
    if sets[3] is not None:
        for weekday in map(int, sets[3].split(',')):
            weekday_str += f'{week_array[weekday - 1]}, '
        weekday_str = weekday_str[:-2]
    else:
        weekday_str = '–ù–∏ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω, —Ñ–æ—Ç–æ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è'
    extra = f'\n<b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b>\n<i>{weekday_str}</i>\n<b>–í—Ä–µ–º—è:</b>\n<i>{sets[4]}:{sets[5]}</i></blockquote>'
    return text + groups_str + extra


def get_text_of_group_sets(group_id: int, include_name: bool = True):
    settings = get_group_sets(group_id)
    name = settings[7]
    domain = settings[1]
    text = f'üë• <b><a href="vk.com/{domain}">{name}</a></b>\n\n'
    active = '‚Ä¢ <b><i>–ê–∫—Ç–∏–≤–Ω–∞ üü¢</i></b>' if settings[2] else '‚Ä¢ <b><i>–û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå</i></b>'
    top_likes = f'‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: <b>{"–ª–∞–π–∫–∞–º üëç" if settings[3] else "–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ üÜï"}</b>'
    photo_amount = f'‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ, –∑–∞ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç–µ–Ω–µ: <b>{settings[4]}</b>'
    time_delta = f'‚Ä¢ –ü–æ—Å—Ç—ã –Ω–µ —Ä–∞–Ω—å—à–µ, —á–µ–º <b>{settings[5]}</b> –¥–Ω–µ–π(-—è) –Ω–∞–∑–∞–¥'
    last_update = f'‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ <b>{datetime.datetime.fromtimestamp(settings[6]).strftime("%H:%M %d.%m.%y")}</b>' if settings[6] != 0 else ''
    if include_name:
        return f'{text}{active}\n{top_likes}\n{photo_amount}\n{time_delta}\n{last_update}'
    else:
        return f'{active}\n{top_likes}\n{photo_amount}\n{time_delta}\n{last_update}'


def moderate_keyboard(file_id: int, creator: str):
    if file_id == -1:
        array = [[InlineKeyboardButton(text='‚úÖ', callback_data=ModerateCallBack(action=3, photo_id=file_id,
                                                                                creator=creator).pack()),
                  InlineKeyboardButton(text='‚ùå', callback_data=ModerateCallBack(action=2, photo_id=file_id,
                                                                                creator=creator).pack())]]
        return InlineKeyboardMarkup(inline_keyboard=array)
    array = [[InlineKeyboardButton(text='‚úÖ', callback_data=ModerateCallBack(action=1, photo_id=file_id, creator=creator).pack()),
              InlineKeyboardButton(text='‚ùå', callback_data=ModerateCallBack(action=0, photo_id=file_id, creator=creator).pack()),
              InlineKeyboardButton(text='üîï', callback_data=ModerateCallBack(action=4, photo_id=file_id, creator=creator).pack())]]
    return InlineKeyboardMarkup(
        inline_keyboard=array)


def confirm_keyboard(file_id: int):
    array = [[InlineKeyboardButton(text='‚úÖ', callback_data=ConfirmCallBack(action=1, photo_id=file_id).pack()),
              InlineKeyboardButton(text='‚ùå', callback_data=ConfirmCallBack(action=0, photo_id=file_id).pack())]]
    return InlineKeyboardMarkup(inline_keyboard=array)


def get_admin_keyboard(user_id: int, cancel_url_sending: bool = False, superuser: bool = False):
    if cancel_url_sending:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=1).pack())]])
    array_buttons: list[list[InlineKeyboardButton]] = []
    if superuser:
        incels = list(get_users())
        admins = get_admins()
        for i in range((len(incels) + 2) // 3):
            loc_array = []
            for j in range(min(3, len(incels) - i * 3)):
                username = get_username_by_id(incels[i * 3 + j])
                emoji_loc = ' üíé' if incels[i * 3 + j] in admins else ''
                button = InlineKeyboardButton(text=username + emoji_loc,
                                              callback_data=AdminCallBack(action=5, user_id=incels[i * 3 + j]).pack())
                loc_array.append(button)
            array_buttons.append(loc_array)
        array_buttons.append([InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=-2).pack())])
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    row1 = [InlineKeyboardButton(text='–ì—Ä—É–ø–ø—ã üë•', callback_data=AdminCallBack(action=1).pack()),
            InlineKeyboardButton(text='–û–ø–æ–≤–µ—â–µ–Ω–∏—è üîä', callback_data=AdminCallBack(action=2).pack())]
    row2 = [InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ ‚û°Ô∏è', callback_data=AdminCallBack(action=3).pack()),
            InlineKeyboardButton(text='–£–≤–æ–ª–∏—Ç—å—Å—è üö´', callback_data=AdminCallBack(action=0).pack())]
    array_buttons = [row1, row2]
    if user_id == 972753303:
        array_buttons.append(
            [InlineKeyboardButton(text='–ù–∞—Å—Ç–æ—è—â–∏–µ –∞–¥–º–∏–Ω—ã üëë', callback_data=AdminCallBack(action=-1).pack())])
    markup = InlineKeyboardMarkup(inline_keyboard=array_buttons)
    return markup


def get_manage_photo(ids: Union[int, List], mode=1, back_ids=0, message_to_delete=0):
    if mode == 2:
        return None
    elif mode == 3:
        row1 = [InlineKeyboardButton(text='‚úÖ', callback_data=ManageSettings(action=1, photo_id=ids, back_ids=back_ids, message_to_delete=message_to_delete).pack()),
                InlineKeyboardButton(text='üìùüö´', callback_data=ManageSettings(action=2, photo_id=ids,back_ids=back_ids, message_to_delete=message_to_delete).pack()),
                InlineKeyboardButton(text='‚úèÔ∏è', callback_data=ManageSettings(action=3, photo_id=ids, back_ids=back_ids, message_to_delete=message_to_delete).pack())]
        array_buttons: list[list[InlineKeyboardButton]] = [row1, [InlineKeyboardButton(text='üîô',
                                                                                       callback_data=ManageSettings(
                                                                                           action=7, photo_id=ids,
                                                                                           back_ids=back_ids,
                                                                                           message_to_delete=message_to_delete).pack())]]
        markup = InlineKeyboardMarkup(inline_keyboard=array_buttons)
        return markup
    if isinstance(ids, list):
        rows = []
        cnt = 1
        for i in range((len(ids) + 4) // 5):
            loc_array = []
            for j in range(min(5, len(ids) - i * 5)):
                button = InlineKeyboardButton(text=str(cnt),
                                              callback_data=ManageSettings(action=5, photo_id=ids[i * 5 + j],
                                                                           back_ids=f'{min(ids)}, {max(ids)}',
                                                                           message_to_delete=message_to_delete).pack())
                loc_array.append(button)
                cnt += 1
            rows.append(loc_array)
        if len(rows) >= 2:
            if len(rows[-1]) <= 2:
                rows[-1] = rows[-2][-2:] + rows[-1]
                rows[-2] = rows[-2][:-2]
            elif len(rows[-1]) == 3:
                rows[-1] = rows[-2][-1:] + rows[-1]
                rows[-2] = rows[-2][:-1]
        rows.append([InlineKeyboardButton(text='üóë',
                                          callback_data=ManageSettings(action=6, photo_id=f'{min(ids)}, {max(ids)}',
                                                                       message_to_delete=message_to_delete).pack())])
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        return markup
    else:
        row1 = [InlineKeyboardButton(text='‚úÖ', callback_data=ManageSettings(action=1, photo_id=ids).pack()),
                InlineKeyboardButton(text='üìùüö´', callback_data=ManageSettings(action=2, photo_id=ids).pack()),
                InlineKeyboardButton(text='‚úèÔ∏è', callback_data=ManageSettings(action=3, photo_id=ids).pack()),
                InlineKeyboardButton(text='üóë', callback_data=ManageSettings(action=4, photo_id=ids).pack())]
        array_buttons: list[list[InlineKeyboardButton]] = [row1]
        markup = InlineKeyboardMarkup(inline_keyboard=array_buttons)
        return markup


def get_group_keyboard(groups_id: Union[List[int], None], go_back_to_menu: bool = False):
    back = InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=-2).pack())
    add = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data=AdminCallBack(action=4).pack())
    array_buttons: list[list[InlineKeyboardButton]] = []
    if groups_id is None:
        array_buttons = [[add],[back]]
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    active_groups = get_active_groups()
    for i in range((len(groups_id) + 2) // 3):
        loc_array = []
        for j in range(min(3, len(groups_id) - i * 3)):
            domain = get_group_name(groups_id[i * 3 + j])
            emoji_loc = 'üü¢' if groups_id[i * 3 + j] in active_groups else '‚ùå'
            button = InlineKeyboardButton(text=emoji_loc + ' ' + domain,
                                          callback_data=GroupCallBack(group_id=groups_id[i * 3 + j]).pack())
            loc_array.append(button)
        array_buttons.append(loc_array)
    array_buttons.append([back, add])
    markup = InlineKeyboardMarkup(inline_keyboard=array_buttons)
    return markup


def get_notify_keyboard(user_id: int, hour: bool = False, minute: bool = False, week: bool = False):
    week_array = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
    settings = get_settings(user_id)
    if week:
        weekdays = get_weekdays(user_id)
        array_buttons = [[]]
        back = InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=2).pack())
        for i in range(7):
            emoji_loc = ' ‚úÖ' if (i + 1) in weekdays else ' ‚ùå'
            array_buttons[0].append(InlineKeyboardButton(text=week_array[i] + emoji_loc,
                                                         callback_data=NotifySettings(action=7, week=i + 1).pack()))
        array_buttons.append([back])
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    if hour:
        array_buttons = [[]]
        back = InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=2).pack())
        for i in range(10, 23, 2):
            array_buttons[0].append(InlineKeyboardButton(text=str(i) + (' ‚úÖ'if str(i) == settings[4] else ''), callback_data=NotifySettings(action=3, hour=i).pack()))
        custom = InlineKeyboardButton(text='–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', callback_data=NotifySettings(action=4).pack())
        array_buttons.append([back, custom])
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    if minute:
        array_buttons = [[]]
        back = InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=2).pack())
        hour = get_hour(user_id)
        start = 0
        if hour == 7 or hour == 19:
            start = 1
            array_buttons[0].append(InlineKeyboardButton(text='00 ‚ùå', callback_data=NotifySettings(action=8, minute=0).pack()))
        for i in range(start, 6):
            array_buttons[0].append(InlineKeyboardButton(text=str(i)+'0' + (' ‚úÖ'if (str(i)+'0') == settings[5] else ''), callback_data=NotifySettings(action=5, minute=i).pack()))
        custom = InlineKeyboardButton(text='–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', callback_data=NotifySettings(action=6).pack())
        array_buttons.append([back, custom])
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    settings = get_settings(user_id)
    back = InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=-2).pack())
    day_of_week = InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ üóì', callback_data=NotifySettings(action=0).pack())
    hour = InlineKeyboardButton(text=f'–í {settings[4]} —á.', callback_data=NotifySettings(action=1).pack())
    minute = InlineKeyboardButton(text=f'{settings[5]} –º–∏–Ω.', callback_data=NotifySettings(action=2).pack())
    array_buttons: list[list[InlineKeyboardButton]] = [[day_of_week], [hour, minute], [back]]
    return InlineKeyboardMarkup(inline_keyboard=array_buttons)


def group_settings_keyboard(settings: tuple, go_back_to_public_settings: bool = False, get_date: bool = False, get_amount: bool = False):
    if go_back_to_public_settings:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô', callback_data=GroupSettings(action=7, group_id=settings[0]).pack())]])
    array_buttons: list[list[InlineKeyboardButton]] = []
    if get_date or get_amount:
        loc_array = []
        action = 8 if get_amount else 9
        delta = 1 if get_amount else 0
        value = settings[4] if get_amount else settings[5]
        for i in range(0 + delta, 8 + delta):
            loc_array.append(InlineKeyboardButton(text=str(i) + (' ‚úÖ' if i == int(value) else ''), callback_data=GroupSettings(action=action, group_id=settings[0], amount=i, date=i).pack()))
        array_buttons.append(loc_array)
        array_buttons.append([InlineKeyboardButton(text='üîô', callback_data=GroupSettings(action=7, group_id=settings[0]).pack())])
        return InlineKeyboardMarkup(inline_keyboard=array_buttons)
    back = InlineKeyboardButton(text='üîô', callback_data=AdminCallBack(action=1).pack())
    delete = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å üóë', callback_data=GroupSettings(action=5, group_id=settings[0]).pack())
    info = InlineKeyboardButton(text='‚ÑπÔ∏è', callback_data=GroupSettings(action=6, group_id=settings[0]).pack())
    row1 = [InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å ‚ùå' if settings[2] else '–í–∫–ª—é—á–∏—Ç—å üü¢', callback_data=GroupSettings(action=1, group_id=settings[0]).pack()),
            InlineKeyboardButton(text='–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ üÜï' if settings[3] else '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ üëç', callback_data=GroupSettings(action=2, group_id=settings[0]).pack())]
    row2 = [InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ', callback_data=GroupSettings(action=3, group_id=settings[0]).pack()),
            InlineKeyboardButton(text='–î–∞—Ç–∞ –ø–æ—Å—Ç–∞', callback_data=GroupSettings(action=4, group_id=settings[0]).pack())]
    markup = InlineKeyboardMarkup(inline_keyboard=[row1, row2, [back, delete, info]])
    return markup



@dp.callback_query(AdminCallBack.filter())
async def moderate_main_settings(callback: CallbackQuery, callback_data: AdminCallBack, state: FSMContext):
    action = callback_data.action
    if action == -2:
        await callback.message.edit_text(text=get_text_of_settings(callback.from_user.id), disable_web_page_preview=True,
                                         reply_markup=get_admin_keyboard(callback.from_user.id))
    elif action == 0:
        set_inactive(callback.from_user.id)
        await callback.message.delete()
        await callback.message.answer(text='–¢—ã –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤! –õ–æ—Ö, –Ω—É —Ç—ã —Ç–∏–ø–∞ –ø–∏–¥–æ—Ä', reply_markup=basic_keyboard)
    elif action == 1:
        await state.clear()
        groups_str = get_settings(callback.from_user.id)[6]
        if groups_str is None:
            await callback.message.edit_text(text='üë• –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø. –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å! –ñ–º–∏ üëáüèø',reply_markup=get_group_keyboard(groups_id=None))
            return
        text = '<b>üë• –ù–∞–∂–º–∏ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é</b>'
        await callback.message.edit_text(text=text, reply_markup=get_group_keyboard(sorted(list(map(int, groups_str.split(','))))))
    elif action == 2:
        text = '<b>üîä –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>'
        await callback.message.edit_text(text=text, reply_markup=get_notify_keyboard(callback.from_user.id))
    elif action == 3:
        sets = get_settings(callback.from_user.id)
        if not sets[1]:
            await callback.message.edit_text('–¢—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω! –õ–æ—Ö, –Ω—É —Ç—ã —Ç–∏–ø–∞ –ø–∏–¥–æ—Ä')
            return
        if sets[6] is None:
            await callback.message.edit_text('üë• –¢—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å! –ñ–º–∏ üëá',
                                             reply_markup=get_group_keyboard(groups_id=None))
        else:
            mes_id = await bot.send_photo(chat_id=callback.from_user.id, photo='https://i.postimg.cc/TYv4PFJP/drawing-kitten-animals-9-Favim-1.jpg', caption=f'–ù–∞—á–∞–ª –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –ø–æ –≥—Ä—É–ø–ø–∞–º')
            await notify_admin(callback.from_user.id, message_id=mes_id.message_id)
            await callback.answer()

    elif action == 4:
        await callback.message.edit_text(text='–°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã –≤–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ', reply_markup=get_admin_keyboard(callback.from_user.id, cancel_url_sending=True))
        await state.set_state(FSMFillForm.inserting_url)
    elif action == -1:
        await callback.message.edit_text(text='<b>üë§ –í—Å–µ –∏–Ω—Ü–µ–ª—ã</b>: –≤–æ—Ç –æ–Ω–∏ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ', reply_markup=get_admin_keyboard(callback.from_user.id, superuser=True))
    elif action == 5:
        user_id = callback_data.user_id
        if user_id in get_admins():
            set_inactive(user_id)
            await bot.send_message(chat_id=user_id, text='–¢—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω! –õ–æ—Ö, –Ω—É —Ç—ã —Ç–∏–ø–∞ –ø–∏–¥–æ—Ä', reply_markup=basic_keyboard)
        else:
            set_admin(user_id)
            await bot.send_message(chat_id=user_id, text='–¢–µ–±—è –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–æ–º üëë\n<i>–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∞–¥–º–∏–Ω—ã —Ä–∞–±–æ—Ç–∞—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ</i>', reply_markup=admin_keyboard)
        await callback.message.edit_text(text='<b>üë§ –í—Å–µ –∏–Ω—Ü–µ–ª—ã</b>: –≤–æ—Ç –æ–Ω–∏ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ',
                                         reply_markup=get_admin_keyboard(callback.from_user.id, superuser=True))


async def send_next_photo(user_id: int):
    queue = get_admins_queue(user_id)
    if len(queue) == 0:
        return
    i = min(queue)
    remove_from_admins_queue(user_id, i)
    try:
        extra = '' if len(queue) == 1 else f' | {len(queue) - 1} –≤ –æ—á–µ—Ä–µ–¥–∏'
        if '-' not in i:
            async with ChatActionSender(bot=bot, chat_id=user_id, action='upload_photo'):
                photo = send_photos_by_id(int(i))
                caption = f'üë• <b><a href="vk.com/{photo[1]}">{get_group_name(photo[1][:photo[1].find("?")])}</a></b>' + extra
                msg = await bot.send_photo(chat_id=user_id, photo=photo[3],
                                           caption=photo[2] + ("\n\n" if len(photo[2]) > 0 else "") + caption,
                                           reply_markup=get_manage_photo(ids=int(i)))
                set_message_to_delete(user_id, str(msg.message_id))
            return
        else:
            num = list(map(int, i.split('-')))
            nums = [i for i in range(num[0], num[1] + 1)]
            photo = send_photos_by_id(nums[0])
            caption = f'üë• <b><a href="vk.com/{photo[1]}">{get_group_name(photo[1][:photo[1].find("?")])}</a></b>' + extra
            media = []
            for num in nums:
                loc_photo = send_photos_by_id(num)
                media.append(InputMediaPhoto(media=loc_photo[3]))

            async with ChatActionSender(bot=bot, chat_id=user_id, action='upload_photo'):
                msg: List[Message] = await bot.send_media_group(user_id, media=media)
                await bot.send_message(chat_id=user_id,
                                       text=photo[2] + ("\n\n" if len(photo[2]) > 0 else "") + caption,
                                       reply_markup=get_manage_photo(ids=nums,
                                                                     message_to_delete=f'{msg[0].message_id}, {msg[-1].message_id}'),
                                       disable_web_page_preview=True)
                set_message_to_delete(user_id, f'{msg[0].message_id}-{msg[-1].message_id}')
    except Exception as e:
        await bot.send_message(chat_id=user_id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 4\n{e}')
        if user_id != 972753303:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 4\n{e}')
        send_next_photo(user_id)



@dp.callback_query(ManageSettings.filter())
async def moderate_manage_settings(callback: CallbackQuery, callback_data: ManageSettings, state: FSMContext):
    action = callback_data.action
    photo_id = callback_data.photo_id
    if action == 2:
        await callback.answer('–§–æ—Ç–æ –±—É–¥–µ—Ç –≤—ã–ª–æ–∂–µ–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏')
    if action == 1 or action == 2:
        information = get_group_photo_info(photo_id)
        last_num = get_last()
        add_photo_id(last_num + 1, information[3], f'üë• {information[1]}')
        if information[2] != '' and action == 1:
            add_note(last_num + 1, information[2])
        try:
            await callback.message.edit_caption(
                caption=f'–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã üë• <b><a href="vk.com/{information[1]}">{get_group_name(information[1][:information[1].find("?"):])}</a></b>',
                reply_markup=get_rates_keyboard(last_num + 1, 3, ids=photo_id, back_ids=callback_data.back_ids,
                                                message_to_delete=callback_data.message_to_delete))
        except Exception:
            await callback.message.edit_text(
                text=f'–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã üë• <b><a href="vk.com/{information[1]}">{get_group_name(information[1][:information[1].find("?"):])}</a></b>',
                reply_markup=get_rates_keyboard(last_num + 1, 3, ids=photo_id, back_ids=callback_data.back_ids,
                                                message_to_delete=callback_data.message_to_delete),
                disable_web_page_preview=True)
    elif action == 3:
        if callback.message.photo:
            await callback.message.edit_caption(caption='–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —ç—Ç–æ–π –ø–∏–∫—á–µ...',
                                                reply_markup=get_rates_keyboard(0, 3, photo_id, True))
        else:
            await callback.message.edit_text('–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —ç—Ç–æ–π –ø–∏–∫—á–µ...',
                                             reply_markup=get_rates_keyboard(0, 3, photo_id,
                                                                             back_ids=callback_data.back_ids,
                                                                             message_to_delete=callback_data.message_to_delete,
                                                                             back=True))
        information = get_group_photo_info(photo_id)
        last_num = get_last()
        add_photo_id(last_num + 1, information[3], f'üë• {information[1]}')
        set_message_to_delete(callback.from_user.id, str(callback.message.message_id))
        caption_global[callback.from_user.id] = (last_num + 1, photo_id)
        await state.set_state(FSMFillForm.inserting_caption)
    elif action == 4:
        try:
            del_group_photo(photo_id)
            await callback.message.delete()
            await send_next_photo(callback.from_user.id)
        except Exception as e:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 5\n{e}')
    elif action == 5:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ', reply_markup=get_manage_photo(photo_id, mode=3, back_ids=callback_data.back_ids, message_to_delete=callback_data.message_to_delete))
    elif action == 6:
        try:
            start = int(photo_id.split(',')[0])
            end = int(photo_id.split(',')[1])
            for photo_id in range(start, end + 1):
                del_group_photo(photo_id)
            await callback.message.delete()
            msgs = list(map(int, callback_data.message_to_delete.split(',')))
            msgs_list = [i for i in range(msgs[0], msgs[-1] + 1)]
            await bot.delete_messages(chat_id=callback.from_user.id, message_ids=msgs_list)
            await send_next_photo(callback.from_user.id)
        except Exception as e:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 6\n{e}')
    elif action == 7:
        ids_str = callback_data.back_ids
        first = int(ids_str.split(',')[0])
        last = int(ids_str.split(',')[1])
        ids_list = [i for i in range(first, last + 1)]
        info = get_group_photo_info(first)
        queue = get_admins_queue(callback.from_user.id)
        extra = f' | {len(queue)} –≤ –æ—á–µ—Ä–µ–¥–∏'
        txt = '' if info[2] is None else info[2]
        caption = f'{txt}\n\nüë• <b><a href="vk.com/{info[1]}">{get_group_name(info[1][:info[1].find("?")])}</a></b>' + extra
        await callback.message.edit_text(text=caption,
                                      reply_markup=get_manage_photo(ids=ids_list, message_to_delete=callback_data.message_to_delete),
                                      disable_web_page_preview=True)
    elif action == 8:
        back_ids = callback_data.back_ids
        if ',' in back_ids:
            first = int(back_ids.split(',')[0])
            last = int(back_ids.split(',')[1])
            id = [i for i in range(first, last + 1)]
        else:
            id = photo_id
        queue = get_admins_queue(callback.from_user.id)
        extra = f' | {len(queue)} –≤ –æ—á–µ—Ä–µ–¥–∏'
        photo = send_photos_by_id(int(photo_id))
        txt = '' if photo[2] is None else photo[2]
        caption = f'{txt}\n\nüë• <b><a href="vk.com/{photo[1]}">{get_group_name(photo[1][:photo[1].find("?")])}</a></b>' + extra
        if callback.message.photo:
            await callback.message.edit_caption(caption=caption, reply_markup=get_manage_photo(ids=id))
        else:
            await callback.message.edit_text(text=caption, reply_markup=get_manage_photo(ids=id, message_to_delete=callback_data.message_to_delete, back_ids=back_ids), disable_web_page_preview=True)
        await state.clear()


@dp.callback_query(GroupCallBack.filter())
async def moderate_group_settings(callback: CallbackQuery, callback_data: AdminCallBack):
    settings = get_group_sets(callback_data.group_id)
    await callback.message.edit_text(text=get_text_of_group_sets(callback_data.group_id, 1),
                                     disable_web_page_preview=True,
                                     reply_markup=group_settings_keyboard(settings))


@dp.callback_query(NotifySettings.filter())
async def moderate_notify_settings(callback: CallbackQuery, callback_data: NotifySettings, state: FSMContext):
    action = callback_data.action
    if action == 0:
        txt = '–í—ã–±–µ—Ä–∏ <b>–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏</b>, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ'
        await callback.message.edit_text(text=txt, reply_markup=get_notify_keyboard(callback.from_user.id, week=True))
    elif action == 1:
        txt = '–í—ã–±–µ—Ä–∏ —á–∞—Å –∏–ª–∏ –≤–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞–º'
        await callback.message.edit_text(text=txt, reply_markup=get_notify_keyboard(callback.from_user.id, hour=True))
    elif action == 2:
        txt = '–í—ã–±–µ—Ä–∏ –º–∏–Ω—É—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞–º'
        await callback.message.edit_text(text=txt, reply_markup=get_notify_keyboard(callback.from_user.id, minute=True))
    elif action == 3:
        hour = callback_data.hour
        change_hour(callback.from_user.id, hour)
        await callback.answer(text=f'{hour} üïë')
        text = '<b>üîä –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>'
        await callback.message.edit_text(text=text, reply_markup=get_notify_keyboard(callback.from_user.id))
    elif action == 4:
        await callback.message.edit_text(text='–í–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≤—ã–±–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. <u>–£—á—Ç–∏</u>, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ 7:00 –∏ 19:00, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –≤—Ä–µ–º—è –ª—É—á—à–µ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å. –í—ã–±—Ä–∞–ª ‚Äî –µ–±–ª–∞–Ω!')
        await state.set_state(FSMFillForm.inserting_hour)
    elif action == 5:
        minute = callback_data.minute
        minute = str(minute) + '0'
        change_minute(callback.from_user.id, minute)
        await callback.answer(text=minute+ ' üïë')
        text = '<b>üîä –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>'
        await callback.message.edit_text(text=text, reply_markup=get_notify_keyboard(callback.from_user.id))
    elif action == 6:
        await callback.message.edit_text(text='–í–≤–µ–¥–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≤—ã–±–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. <u>–£—á—Ç–∏</u>, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ 7:00 –∏ 19:00, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –≤—Ä–µ–º—è –ª—É—á—à–µ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å. –í—ã–±—Ä–∞–ª ‚Äî –µ–±–ª–∞–Ω!')
        await state.set_state(FSMFillForm.inserting_minute)
    elif action == 7:
        day = callback_data.week
        change_weekdays(callback.from_user.id, day)
        txt = '–í—ã–±–µ—Ä–∏ <b>–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏</b>, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ'
        await callback.message.edit_text(text=txt, reply_markup=get_notify_keyboard(callback.from_user.id, week=True))
    elif action == 8:
        await callback.answer('–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è!')

@dp.callback_query(GroupSettings.filter())
async def moderate_group_deep_settings(callback: CallbackQuery, callback_data: GroupSettings):
    action = callback_data.action
    group_id = callback_data.group_id
    if action == 1 or action == 2:
        if action == 1:
            switch_active(group_id)
        else:
            switch_top_likes(group_id)

        await callback.message.edit_text(text=get_text_of_group_sets(group_id),
                                         disable_web_page_preview=True, reply_markup=group_settings_keyboard(get_group_sets(group_id)))
    elif action == 3:
        await callback.message.edit_text(text='–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –ø—Ä–∏ –æ–¥–Ω–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ', reply_markup=group_settings_keyboard(settings=get_group_sets(group_id), get_amount=True))
    elif action == 4:
        await callback.message.edit_text(text='–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ',
                                         reply_markup=group_settings_keyboard(settings=get_group_sets(group_id), get_date=True))
    elif action == 5:
        name = get_group_name(group_id)
        try:
            delete_group(group_id, user_id=callback.from_user.id)
            await callback.answer(f'–ì—Ä—É–ø–ø–∞ {name} —É–¥–∞–ª–µ–Ω–∞ üóë')
        except Exception as e:
            await callback.message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 7\n{e}')
        groups_str = get_settings(callback.from_user.id)[6]
        if groups_str is None:
            await callback.message.edit_text(text='–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø',
                                             reply_markup=get_group_keyboard(groups_id=None))
            return
        text = '<b>üë• –ù–∞–∂–º–∏ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é</b>'
        await callback.message.edit_text(text=text,
                                         reply_markup=get_group_keyboard(sorted(list(map(int, groups_str.split(','))))))
    elif action == 6:
        await callback.message.edit_text(text='‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø—ã</b>\n1) –ü–µ—Ä–µ–∫–ª—é—á–∏ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã <b>–Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ</b> / <b>–ø–æ–ª—É—á–∞—Ç—å —Ñ–æ—Ç–æ</b> —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã\n2) –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤:\n   <b>–ø–æ –ª–∞–π–∫–∞–º:</b> –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã <i>n</i> –ø–æ—Å—Ç–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤\n   <b>–ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏:</b> –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ <i>n</i> –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n3) <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:</b> –≤—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –æ–¥–Ω–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ\n4) <b>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞:</b> –∑–¥–µ—Å—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ª–æ–∂–µ–Ω—ã –ø–æ—Å—Ç—ã. –°–æ–≤–µ—Ç: —á–µ–º –¥–æ–ª—å—à–µ –ø–æ—Å—Ç—ã –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–µ–Ω–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –ª–∞–π–∫–æ–≤ –æ–Ω–∏ —Å–æ–±–∏—Ä–∞—é—Ç, –ø–æ—ç—Ç–æ–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–∞–π–∫–∞–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Ç–∞–∫–∂–µ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.\n5) <b>–£–¥–∞–ª–∏—Ç—å:</b> –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞',
                                         reply_markup=group_settings_keyboard(get_group_sets(group_id), True))
    elif action == 7:
        await callback.message.edit_text(text=get_text_of_group_sets(group_id, 1),
                                         disable_web_page_preview=True,
                                         reply_markup=group_settings_keyboard(get_group_sets(group_id)))
    elif action == 8:
        amount = callback_data.amount
        change_amount(group_id, amount)
        await callback.answer(text=str(amount))
        await callback.message.edit_text(text=get_text_of_group_sets(group_id),
                                         disable_web_page_preview=True, reply_markup=group_settings_keyboard(get_group_sets(group_id)))
    elif action == 9:
        date = callback_data.date
        change_date(group_id, date)
        update_time(group_id, 0)
        await callback.answer(text=str(date))
        await callback.message.edit_text(text=get_text_of_group_sets(group_id),
                                         disable_web_page_preview=True, reply_markup=group_settings_keyboard(get_group_sets(group_id)))


@dp.message(StateFilter(FSMFillForm.inserting_url))
async def get_url_vk(message: Message, state: FSMContext):
    if message.text:
        valid = check_valid_url(message.text)
        if not valid[0]:
            await message.answer('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É <b><u>vk.com</u></b>')
        else:
            group_id = add_group(message.from_user.id, valid[1])
            if group_id[0] == -1:
                await message.answer(f'–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ\n\n{get_text_of_group_sets(group_id[1], 1)}', disable_web_page_preview=True, reply_markup=group_settings_keyboard(get_group_sets(group_id[1])))
                await state.clear()
                return
            group_id = group_id[0]
            group_sets = get_group_sets(group_id)
            name = get_group_name(valid[1])
            await message.answer(
                f'–¢—ã –¥–æ–±–∞–≤–∏–ª –≥—Ä—É–ø–ø—É <b>{name}</b>\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n{get_text_of_group_sets(group_id, 0)}',
                disable_web_page_preview=True, reply_markup=group_settings_keyboard(group_sets))
            await state.clear()
    else:
        await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É! –õ–æ—Ö')

@dp.message(StateFilter(FSMFillForm.inserting_caption))
async def get_caption_group(message: Message, state: FSMContext):
    if not message.text:
        await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–∏–∫—á–µ, —Å—É–∫–∞ —Ä—É—Å—Å–∫–∏–π —É—á–∏')
        return
    num, photo_id = caption_global[message.from_user.id]
    if num == 0:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
        return
    caption_global[message.from_user.id] = (0, 0)
    add_note(num, message.text)
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_photo'):
        await bot.send_photo(chat_id=message.from_user.id, photo=get_photo_id_by_id(num),
                             caption=f'–û—Ö—É–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: <b><i>{message.text}</i></b>. –ê —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –º—Ä–∞–∑—å',
                             reply_markup=get_rates_keyboard(num, mailing=3, ids=photo_id, delete=False))
    previous = get_message_to_delete(message.from_user.id)
    if '-' in previous:
        previous = list(map(int, previous.split('-')))
        msgs_list = [i for i in range(previous[0], previous[-1] + 1)]
        await bot.delete_messages(chat_id=message.from_user.id, message_ids=msgs_list)
    else:
        await bot.delete_message(chat_id=message.from_user.id, message_id=int(previous))
    await state.clear()


@dp.message(StateFilter(FSMFillForm.inserting_hour))
async def get_hour_vk(message: Message, state: FSMContext):
    if message.text:
        valid = check_hours(message.text)
        if not valid:
            await message.answer('–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–∞. –¢—ã –Ω–µ —É–º–µ–µ—à—å —Å—á–∏—Ç–∞—Ç—å?')
        else:
            hour = int(message.text)
            minute = get_minute(message.from_user.id)
            minute_str = str(minute)
            if minute == 0:
                minute_str = '00'
            elif minute < 10:
                minute_str = '0' + minute_str
            if (hour == 6 or hour == 18) and (minute >= 55):
                await message.answer(text=f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç: {minute_str}</b>. –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ <u>{hour + 1}:00</u>, —Ç–µ–±–µ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ!')
                return
            if (hour == 7 or hour == 19) and (minute <= 9):
                await message.answer(text=f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç: {minute_str}</b>. –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ <u>{hour}:00</u>, —Ç–µ–±–µ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ!')
                return
            if (hour == 9) and (minute <= 16 and minute >= 5):
                await message.answer(text=f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç: {minute_str}</b>. –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ <u>9:10</u>, —Ç–µ–±–µ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ!')
                return
            set_hour(message.from_user.id, str(hour))
            await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —à–ª—é—Ö–∏ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ <b>{hour}:{minute_str}</b>. <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è, –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞...</i>', reply_markup=get_notify_keyboard(message.from_user.id))
            await state.clear()
    else:
        await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç ü§®\n–¢—ã –Ω–µ —É–º–µ–µ—à—å —Å—á–∏—Ç–∞—Ç—å?')


@dp.message(StateFilter(FSMFillForm.inserting_minute))
async def get_minute_vk(message: Message, state: FSMContext):
    if message.text:
        valid = check_minutes(message.text)
        if not valid:
            await message.answer('–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç')
        else:
            minute = int(message.text)
            hour = get_hour(message.from_user.id)
            if (hour == 6 or hour == 18) and (minute >=55):
                await message.answer(text=f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–∞: {hour}</b>. –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ <u>{hour + 1}:00</u>, —Ç–µ–±–µ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —á—É—Ç—å –ø–æ—Ä–∞–Ω—å—à–µ!')
                return
            if (hour == 7 or hour == 19) and (minute <= 9):
                await message.answer(text=f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–∞: {hour}</b>. –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ <u>{hour}:00</u>, —Ç–µ–±–µ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ!')
                return
            if (hour == 9) and (minute <= 16 and minute >= 5):
                await message.answer(text=f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç: {minute_str}</b>. –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ <u>9:10</u>, —Ç–µ–±–µ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ!')
                return
            minute_str= str(minute)
            if minute == 0:
                minute_str = '00'
            elif minute < 10:
                minute_str = '0' + minute_str
            set_minute(message.from_user.id, minute_str)
            await message.answer(
                f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —à–ª—é—à–∞–Ω–¥—Ä—ã –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ <b>{hour}:{minute_str}</b>. <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è, –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞...</i>',
                reply_markup=get_notify_keyboard(message.from_user.id))
            await state.clear()
    else:
        await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ü§®\n–ß—ë –µ–±–∞–ª—å–Ω–∏–∫ —Ä–∞–∑–∏–Ω—É–ª?')


async def send_incel_photo(callback: Union[CallbackQuery, None] = None, user_id: Union[int, None] = None):
    try:
        if callback:
            user_id = callback.from_user.id
            username = callback.from_user.username
        else:
            username = 0

        q = get_queue(user_id)
        if q is None or len(q) == 0:
            add_current_state(user_id, 0, username)
            if callback:
                await callback.message.delete()
            else:
                await bot.send_message(chat_id=user_id, text='–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ üëå')
            return

        i = min(q)
        media = InputMediaPhoto(media=get_photo_id_by_id(i))
        reply_markup = get_rates_keyboard(num=i, mailing=1)

        if callback:
            async with ChatActionSender(bot=bot, chat_id=user_id, action='upload_photo'):
                await callback.message.edit_media(media=media, reply_markup=reply_markup)
        else:
            await bot.send_photo(user_id, get_photo_id_by_id(i), reply_markup=reply_markup)

        add_current_state(user_id, i, username)

    except Exception as e:
        error_text = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username if username != 0 else "id:"} ({user_id}) –Ω–µ –ø–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n{e}'
        if not 'specified new message content and reply markup are exactly the same' in str(e):
            await bot.send_message(chat_id=972753303, text=error_text)



@dp.callback_query(RateCallBack.filter())
async def filter_rates(callback: CallbackQuery,
                       callback_data: RateCallBack, state: FSMContext):
    num = callback_data.photo_id
    await callback.answer(text=rate[callback_data.r])
    mailing = callback_data.mailing
    votes = get_votes(num)
    photo_is_not_posted = True
    insert_last_rate(callback.from_user.id, num)
    if mailing == 1 and len(votes.keys()) >= len(get_users()):
        photo_is_not_posted = False  # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å—Ç –Ω–µ –≤—ã–ª–æ–∂–∏–ª—Å—è –µ—â–µ —Ä–∞–∑)
    add_rate(num, callback.from_user.username, callback_data.r)
    delete_from_queue(callback.from_user.id, num)
    last_upd = get_last_upd(callback.from_user.id)
    current_time = int(time.time())
    if current_time - last_upd <= 60:
        increment_time(callback.from_user.id, current_time - last_upd, current_time)
    else:
        increment_time(callback.from_user.id, 1, current_time)
    if mailing == 1:
        try:
            votes = get_votes(num)
            if len(votes.keys()) + 1 == len(get_users()):
                voted = set(votes.keys())
                users = set()
                for i in get_users():
                    users.add(get_username_by_id(i))
                last_username = next(iter((users - voted)))
                if last_username and isinstance(last_username, str) and len(last_username) > 0:
                    user_id = get_id_by_username(last_username)
                    if user_id and (last_username not in states_users or states_users[last_username] + datetime.timedelta(
                            hours=1) < datetime.datetime.now()):
                        add_afk(user_id)
                        await bot.send_message(
                            text=f'<b>{last_username}</b>, –µ–±–∞—Ç—å —Ç–≤–æ–π —Ä–æ—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–∫–æ–π —Ö—É–µ—Å–æ—Å üò°',
                            chat_id=user_id)
                        states_users[last_username] = datetime.datetime.now()

            if len(votes.keys()) >= len(get_users()) and photo_is_not_posted:
                note_str_origin = get_note_sql(num)
                if note_str_origin is None or '/anon' not in note_str_origin:
                    add_to_queue_public_info(num)
                avg = sum(votes.values()) / len(votes.keys())
                add_to_weekly(get_photo_id_by_id(num), avg)
                avg_str = '{:.2f}'.format(avg)
                avg_str_public = '{:.2f}'.format(min(avg + 2, 10))
                await send_results(num, avg_str_public)
                extra = ''
                spoiler = False
                if avg == 0:
                    spoiler = True
                    extra = '<b>üö®–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!üö®\n–£–±–µ—Ä–∏—Ç–µ –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ –¥–µ—Ç–µ–π –∏ –ª—é–¥–µ–π —Å —Ç–æ–Ω–∫–æ–π –¥—É—à–µ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π. –î–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –í–∞—Å, –ø–∏–¥–æ—Ä–æ–≤, —à–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n</b>'
                if avg == 11:
                    spoiler = True
                    extra = '<b>üòç –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤ –æ—Ü–µ–Ω–∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ 11 üòç</b>\n\n'

                user_rates = ''
                sorted_rates = sorted(votes.items(), key=lambda x: x[1], reverse=True)
                rounded = round(avg)
                for key, value in sorted_rates:
                    if value == rounded:
                        add_hit(get_id_by_username(key), 1)
                    else:
                        add_hit(get_id_by_username(key))
                    user_id = get_id_by_username(key)
                    if user_id:
                        add_rate_to_avg(user_id, value)
                    user_rates += f'@{key}: <i>{value}</i>\n'

                note_str = f': <blockquote>{note_str_origin.replace("/anon", "").strip()}</blockquote>\n' if note_str_origin else '\n\n'
                name = get_origin(num)
                name = '@' + name if name[0] != 'üë•' else f'üë• <a href="vk.com/{name[2:]}">{get_group_name(name[:name.find("?")][2:])}</a>'
                txt = extra + f'–ê–≤—Ç–æ—Ä –ø–∏–∫—á–∏ <b>{name}</b>' + note_str + "–û—Ü–µ–Ω–∫–∏ –∏–Ω—Ü–µ–ª–æ–≤:\n" + user_rates + '\n' f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: <b>{avg_str}</b>' + f'\n<i>#{rate2[rounded].replace(" ", "_")}</i>'
                await bot.send_photo(chat_id=channel_id, photo=get_photo_id_by_id(num), caption=txt,
                                     has_spoiler=spoiler)
        except Exception as e:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ —Ñ–æ—Ç–æ ‚Ññ {num} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.username}.\n{e}')
        await send_incel_photo(callback=callback)
        return
    elif mailing == 2:
        await callback.message.delete()
        return
    elif mailing == 3:
        await callback.message.delete()
        await send_photo_to_users(callback.from_user.id, num)
        previous = get_message_to_delete(callback.from_user.id)
        if '-' in previous:
            previous = list(map(int, previous.split('-')))
            msgs_list = [i for i in range(previous[0], previous[-1] + 1)]
            await bot.delete_messages(chat_id=callback.from_user.id, message_ids=msgs_list)
        await send_next_photo(callback.from_user.id)
        return
    elif mailing == 4:
        rate_loc = get_not_incel_rate(num)
        if rate_loc == -1:
            rate_loc = callback_data.r + round(random.uniform(-1, 1), 2)
            rate_loc = max(0, min(10, rate_loc))
            add_rate_not_incel(num, rate_loc)
            await send_results(num, rate_loc)

    await callback.message.edit_text(f'–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É {callback_data.r} {emoji[callback_data.r]}')
    await state.clear()
    await send_photo_to_users(callback.from_user.id, num)


@dp.callback_query(ConfirmCallBack.filter())
async def confirm_photo_filter(callback: CallbackQuery,
                               callback_data: ConfirmCallBack, state: FSMContext):
    action = callback_data.action
    photo_id = callback_data.photo_id
    await callback.answer(text=['‚ùå', '‚úÖ'][action % 2])
    if action == 0:
        await callback.message.edit_text('‚õîÔ∏è –ü–æ–π–º–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç.\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    elif action == 1:
        note = get_note_sql(photo_id)
        note = '' if note is None else f'"{note}"'
        await bot.send_photo(972753303, photo=get_photo_id_by_id(photo_id),
                             caption=f'–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <i>@{callback.from_user.username}</i>\n<i>{note}</i>',
                             reply_markup=moderate_keyboard(photo_id, callback.from_user.username))
        await callback.message.edit_text("üòé –¢–≤–æ—ë —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")


@dp.callback_query(ModerateCallBack.filter())
async def moderate_photo(callback: CallbackQuery,
                         callback_data: ModerateCallBack, state: FSMContext):
    action = callback_data.action
    photo_id = callback_data.photo_id
    creator = callback_data.creator
    if action != 4:
        await callback.answer(text=['‚ùå', '‚úÖ'][action % 2])
    else:
        await callback.answer(text='üîï')
    await callback.message.edit_reply_markup(reply_markup=None)
    if action == 0:
        creator_id = get_id_by_username(creator)
        if creator_id:
            try:
                add_rate_not_incel(photo_id, -2)
                await bot.send_photo(chat_id=creator_id, photo=get_photo_id_by_id(photo_id),
                                     caption=replicas['reject'],
                                     reply_markup=get_keyboard(creator_id))
            except Exception as e:
                await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 8\n{str(e)}')
        await callback.message.answer(text=f'<b>–ó–∞–±–∞–Ω–∏—Ç—å –¥–æ–ª–±–æ–µ–±–∞?</b>\n<i>@{creator}</i>',
                                      reply_markup=moderate_keyboard(-1, creator))
    elif action == 1:
        #creator_id = get_id_by_username(creator)
        # if creator_id is not None:
        #     try:
        #         await bot.send_photo(chat_id=creator_id, photo=get_photo_id_by_id(photo_id),
        #                      caption='–í–∞—à–µ —Ñ–æ—Ç–æ ‚úÖ <b>–ø—Ä–∏–Ω—è—Ç–æ</b> ‚úÖ\n\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ü–µ–Ω–∏—Ç –µ–≥–æ. –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è ‚è∞ <span class="tg-spoiler">(–ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚åöÔ∏èüïê‚è≤)</span>',
        #                      reply_markup=not_incel_keyboard)
        #     except Exception as e:
        #         await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')
        await callback.message.answer(text='–û—Ü–µ–Ω–∏ —ç—Ç–æ —Ñ–æ—Ç–æ',
                                      reply_markup=get_rates_keyboard(photo_id, 4))
    elif action == 3:
        creator_id = get_id_by_username(creator)
        if creator_id is None:
            await callback.message.edit_text(text=f'–°—Ç—Ä–æ–∫–∞ —Å username: <i>"{creator}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
            return
        result = get_ban(creator_id)
        if result == 0:
            await callback.message.edit_text(text=f'–°—Ç—Ä–æ–∫–∞ —Å username: <i>"{creator}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
        else:
            await callback.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>@{creator}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω! –ù–∞—Ö—É–π –µ–≥–æ',
                                             reply_markup=None)
            await bot.send_message(chat_id=creator_id, text='üî´ C —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –≤ –±–∞–Ω–µ')
    elif action == 4:
        rate_loc = get_not_incel_rate(photo_id)
        if rate_loc == -1:
            rate_loc = round(random.uniform(3, 7), 2)
            add_rate_not_incel(photo_id, rate_loc)
            await send_results(photo_id, str(rate_loc))
    else:
        await callback.message.edit_text(text=f'–ü–æ—â–∞–¥–∏–º –µ–≥–æ', reply_markup=None)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    result = check_id(user_id, username)
    if result[0]:
        await message.answer('–ù–∞—Ö—É—è —Ç—ã —Å—Ç–∞—Ä—Ç –Ω–∞–∂–∞–ª? –ï—Å–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞, –∏–∑–≤–∏–Ω—è—é—Å—å, —Ö–æ—Ç—è –ø–æ—Ö—É–π. –ò–¥–∏ –Ω–∞—Ö—É–π!', reply_markup=get_keyboard(message.from_user.id))
        await state.set_state(FSMFillForm.verified)
    else:
        if result[1] <= 0   :
            await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                                 reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return

        await message.answer(replicas['hi'].replace('$', '"'), disable_web_page_preview=True, reply_markup=get_keyboard(user_id))

        #await message.answer_sticker(sticker='CAACAgIAAxkBAAELD9NljoEHEI6ehudWG_Cql5PXBwMw-AACSCYAAu2TuUvJCvMfrF9irTQE', reply_markup=not_incel_keyboard)


@dp.message_reaction()
async def message_reaction_handler(message_reaction: MessageReactionUpdated):
    if len(message_reaction.new_reaction)!=0:
        await bot.set_message_reaction(chat_id=message_reaction.chat.id, message_id=message_reaction.message_id,
                                   reaction=[ReactionTypeEmoji(emoji=message_reaction.new_reaction[0].emoji)])


@dp.message(Command(commands='password_yaincel'))
async def password_yaincel(message: Message, state: FSMContext):
    set_verified(message.from_user.id)
    await message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ –∏–Ω—Ü–µ–ª–æ–≤!', reply_markup=get_keyboard(message.from_user.id))
    await state.set_state(FSMFillForm.verified)


@dp.message(Command(commands='anon'), ~F.photo)
async def anon(message: Message, state: FSMContext):
    await message.answer(text='–ê —Ñ–æ—Ç–æ—á–∫–∞? ü•∫', reply_markup=get_keyboard(message.from_user.id))


@dp.message(Command(commands='clear_admin_queues'))
async def clear_admin_queues_command(message: Message, state: FSMContext):
    try:
        for user in get_admins():
            remove_from_admins_queue(user, 0)
    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 400\n{e}')
    await message.answer('–û—á–µ—Ä–µ–¥–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã')


@dp.message(Command(commands='help'))
async def help(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer(replicas['help'].replace('$', '"'), disable_web_page_preview=True, reply_markup=get_keyboard(message.from_user.id))
        async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_video'):
            await message.answer_video(video=FSInputFile(path='guide.mp4'))
        return
    await message.answer(
        text='–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>.\n–ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä" –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≥—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ü–µ–Ω–æ–∫ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ.\n' + \
             '–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É –æ—à–∏–±–æ—á–Ω–æ? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É ‚úèÔ∏è".\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ —Ñ–æ—Ç–æ, —Å–¥–µ–ª–∞–π –ø–æ–¥–ø–∏—Å—å –∫ –Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n\n<span class="tg-spoiler">/quote ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞</span>',
        disable_web_page_preview=True, reply_markup=get_keyboard(message.from_user.id))
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_video'):
        await message.answer_video(video=FSInputFile(path='guide.mp4'))


@dp.message(Command(commands='info'))
async def info(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    await message.answer(replicas['info'].replace('$', ''), disable_web_page_preview=True, reply_markup=get_keyboard(message.from_user.id))


@dp.message(Command(commands='about'))
async def about(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    await message.answer(replicas['about'].replace('$', ''), disable_web_page_preview=True, reply_markup=get_keyboard(message.from_user.id))


def format_caption(text):
    if text is None:
        return ''
    if text.lower().count('(—Å)') + text.lower().count('(c)') + text.count('¬©') == 0:
        caption = f'<blockquote>{text}</blockquote>'
    else:
        if '¬©' in text:
            caption = '<blockquote>' + text[:text.find('¬©') - 1] + '</blockquote>' + text[text.find('¬©'):]
        else:
            caption = '<blockquote>' + text[:text.find('(') - 1] + '</blockquote>' + text[text.find('('):]
    return caption


async def send_quote(user_id):
    url = "http://api.forismatic.com/api/1.0/"
    params = {
        "method": "getQuote",
        "format": "json",
        "lang": "ru"
    }
    try:
        rand_int = random.random()
        keyboard = [[InlineKeyboardButton(text='–ï—â–µ —Ü–∏—Ç–∞—Ç–∞ üìñ', callback_data='more')]]
        markup_local = InlineKeyboardMarkup(inline_keyboard=keyboard)

        if rand_int <= 0.01:
            quote = legendary_quote
        elif rand_int <= 0.4:
            try:
                result = get_randQuote()
            except Exception as e:
                await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
                return
            if result is None:
                return
            if result[0]:
                caption = format_caption(result[1])
                await bot.send_photo(chat_id=user_id, photo=result[0], caption=caption, reply_markup=markup_local)
            else:
                caption = format_caption(result[1])
                await bot.send_message(chat_id=user_id, text=caption, reply_markup=markup_local)
            return
        else:
            response = requests.get(url, params=params)
            quote = response.json().get("quoteText")

        await bot.send_message(chat_id=user_id, text=f'<blockquote>{quote}</blockquote>', reply_markup=markup_local)
    except requests.RequestException as e:
        await bot.send_message(chat_id=user_id, text=f'<i>{legendary_quote}</i>')


@dp.message(Command(commands='quote'))
async def quote(message: Message):
    await send_quote(message.from_user.id)


@dp.callback_query(F.data == 'more')
async def process_more_press(callback: CallbackQuery):
    await callback.answer()
    await send_quote(callback.from_user.id)


@dp.message(Command(commands='get_users'), F.from_user.id.in_(incels))
async def send_clear_users_db(message: Message):
    incels = get_users()
    db = get_usersinfo_db()
    if db is None:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞!')
        return

    txt = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(db)}</b>\n\n<b>–ò–Ω—Ü–µ–ª—ã:</b>\n'
    db_incel = [i for i in db if i[3]]
    db_not_incel = [i for i in db if i[3] == 0]
    db_not_incel = sorted(db_not_incel, key=lambda x: (
        -int(x[5].split(',')[-1]) if x[5] else float('inf'), x[1] if x[1] else ''))
    for user in db_incel:
        username = f'@{user[1]}' if user[1] else '‚¨ú'
        queue_str = f'<i>–û—á–µ—Ä–µ–¥—å:</i> {user[-2][:60]}' if (user[3] and user[-2]) else '<i>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚úÖ</i>'
        line = f'<b>{username}</b> | {queue_str}\n'
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            try:
                await message.answer(text=txt)
            except Exception as e:
                await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
            txt = line
    txt += '\n<b>–ü–æ–ø—É—Å–∫–∏:</b>\n'
    for user in db_not_incel:
        username = f'@{user[1]}' if user[1] else '‚¨ú'
        banned = '| –∑–∞–±–∞–Ω–µ–Ω üíÄ' if user[2] else ''
        a = ","
        photos = '' if user[5] is None else f"| <i>–§–æ—Ç–∫–∏:</i> {', '.join(user[5].split(a))}"
        line = f'<b>{username}</b> {banned} {photos}\n'
        if line == '<b>‚¨ú</b>  \n':
            continue
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            try:
                await message.answer(text=txt)
            except Exception as e:
                await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
            txt = line
    try:
        await message.answer(text=txt)
    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')


@dp.message(Command(commands='clear_queue'), F.from_user.id.in_(get_users()))
async def clear_queue(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        try:
            for user in get_users():
                delete_from_queue(id=user)
                add_current_state(id=user, num=0)
            await message.answer(text='–û—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã ü´°')
        except Exception as e:
            await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 10\n{e}')


@dp.message(Command(commands='upd_groupnames'), F.from_user.id.in_(get_users()))
async def upd_groupnames(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        update_groupnames()
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')



@dp.message(Command(commands='clear_states'), F.from_user.id.in_(get_users()))
async def clear_state(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        try:
            for user in get_users():
                add_current_state(id=user, num=0)
            await message.answer(text='–°–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—â–µ–Ω—ã ü´°')
        except Exception as e:
            await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 11\n{e}')


@dp.message(Command(commands='backup'), F.from_user.id.in_(get_users()))
async def backup_files(message: Message):
    try:
        async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_document'):
            doc = InputMediaDocument(media=FSInputFile("slutsDB.db"))
            doc2 = InputMediaDocument(media=FSInputFile("usersDB.db"))
            doc3 = InputMediaDocument(media=FSInputFile("weekly.db"))
            doc4 = InputMediaDocument(media=FSInputFile("weekly_info.db"))
            doc5 = InputMediaDocument(media=FSInputFile("admins.db"))
            doc6 = InputMediaDocument(media=FSInputFile("emoji.db"))
            doc7 = InputMediaDocument(media=FSInputFile("statham.db"),
                                      caption=f'–ë—ç–∫–∞–ø <i>{datetime.datetime.now().date()}</i>')
            await bot.send_media_group(media=[doc, doc2, doc3, doc4, doc5, doc6, doc7], chat_id=message.chat.id)
    except Exception as e:
        await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞.\n{e}')


@dp.message(Command(commands='god_mode'), F.from_user.id.in_(get_users()))
async def god_mode(message: Message):
    if message.from_user.id == 972753303:
        set_admin(972753303)
        await message.answer(text='–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', reply_markup=admin_keyboard)


@dp.message(Command(commands='chill_mode'), F.from_user.id.in_(get_users()))
async def chill_mode_lol(message: Message):
    if message.from_user.id == 972753303:
        chill_mode(972753303)
        await message.answer(text='–ü–æ—á–∏–ª–ª—å, –¥—Ä—É–∂–∏—â–µ!', reply_markup=admin_keyboard)


@dp.message(Command(commands='default_mode'), F.from_user.id.in_(get_users()))
async def default_mode_lol(message: Message):
    if message.from_user.id == 972753303:
        default_mode(972753303)
        await message.answer(text='–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏', reply_markup=admin_keyboard)



@dp.message(Command(commands='get_users_info_db'), F.from_user.id.in_(get_users()))
async def send_users_db(message: Message):
    db = get_usersinfo_db()
    if db is None:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞')
        return
    txt = map(str, db)
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096])


@dp.message(Command(commands='avgs'), F.from_user.id.in_(get_users()))
async def send_avgs(message: Message):
    def center_string(s, total_length):
        s = str(s)
        remaining_length = total_length - len(s)
        if remaining_length <= 0:
            return "<code>" + s[:total_length] + "</code>"

        right_spaces = remaining_length // 2
        left_spaces = remaining_length - right_spaces

        return "<code>" + " " * left_spaces + s + " " * right_spaces + "</code>"

    txt = '<b>–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>\n'
    mx_len_username = 0
    averages, overshoot, hit, afk = {}, {}, {}, {}
    for user in incels:
        username = get_username_by_id(user)
        if len(username) > mx_len_username:
            mx_len_username = len(username)
        average_tuple = get_avg_stats(user)
        if average_tuple is None:
            averages[username] = afk[username] = overshoot[username] = 0
            hit[username] = '0.00%'
        else:
            averages[username] = average_tuple[1] / average_tuple[2]
            overshoot[username] = average_tuple[3]
            hit[username] = f'{"{:.1f}".format(average_tuple[4] / average_tuple[5] * 100)}%'
            afk[username] = average_tuple[6]
    averages = sorted(averages.items(), key=lambda x: x[1], reverse=True)
    txt = f'<code>{"Incel".ljust(mx_len_username)}  </code>   <b>AVG    üëü‚ûîüë†     üéØ      AFK</b>\n'
    hidden_space = '<code> </code>'
    for username, avg in averages:
        if avg is None:
            avg = 0
        if overshoot[username] >= 10 ** 4:
            overshoot[username] = f'{overshoot[username] // 1000}–∫'
        if afk[username] >= 10 ** 4:
            afk[username] = f'{afk[username] // 1000}–∫'
        txt += f'<code>@{username.ljust(mx_len_username)}</code> | <b>{"{:.4f}".format(avg)}</b> |{center_string(overshoot[username], 5)}|{center_string(hit[username], 6)}|<code>{str(afk[username]).rjust(4)}</code>\n'
    await message.answer(txt)


@dp.message(Command(commands='queue'), F.from_user.id.in_(get_users()))
async def get_queue_rates(message: Message):
    db = get_usersinfo_db()
    if db is None:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞', reply_markup=get_keyboard(message.from_user.id))
        return
    db_incel = [i for i in db if i[3]]
    txt = ''
    mx_len_username = 0
    for incel_loc in db_incel:
        if len(incel_loc[1]) > mx_len_username:
            mx_len_username = len(incel_loc[1])
    cnt = 0
    db_incel = sorted(db_incel, key=lambda x: len(x[-2].split(',')) if x[-2] else 0, reverse=True)

    for incel_loc in db_incel:
        if incel_loc[-2] is None:
            queue = '‚úÖ'
        else:
            queue = f"–í –æ—á–µ—Ä–µ–¥–∏ <b>{len(incel_loc[-2].split(','))}</b>"
            cnt += 1
        line = f'<code>@{incel_loc[1].ljust(mx_len_username)}</code> | {queue}\n'
        txt += line
    txt += f'<blockquote>–ò—Ç–æ–≥–æ —É–±–ª—é–¥–∫–æ–≤: <b>{cnt}</b></blockquote>'
    await message.answer(text=txt, reply_markup=get_keyboard(message.from_user.id))


@dp.message(Command(commands='public_queue'), F.from_user.id.in_(get_users()))
async def get_queue_rates(message: Message):
    try:
        queue_length = public_queue()
        await message.answer(text=f'–í –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø–æ—Å—Ç–∏—Ç—å—Å—è: <b>{queue_length}</b>', reply_markup=get_keyboard(message.from_user.id))
    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}', reply_markup=get_keyboard(message.from_user.id))


@dp.message(Command(commands='wasted_time'), F.from_user.id.in_(get_users()))
async def get_queue_rates(message: Message):
    txt = '<b>–ü—Ä–æ—ë–±–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏</b>\n'
    mx_len_username = 0
    wasted = {}
    for user in incels:
        username = get_username_by_id(user)
        wasted[username] = get_avg_stats(user)[8]
        if len(username) > mx_len_username:
            mx_len_username = len(username)
    wasted = sorted(wasted.items(), key=lambda x: x[1], reverse=True)
    for user, w_time in wasted:
        txt += f'<code>@{user.ljust(mx_len_username)}</code> | {convert_unix_time(w_time)}\n'
    await message.answer(txt)


@dp.message(Command(commands='remove_quote'), F.from_user.id.in_(get_users()))
async def remove_quote(message: Message):
    if len(message.text) <= len('remove_quote') + 2:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
        return
    num = int(message.text[len('remove_quote') + 2:])
    res = del_quote(num)
    if res:
        await message.answer(text=f'–¶–∏—Ç–∞—Ç–∞ ‚Ññ{num} —É–¥–∞–ª–µ–Ω–∞')
    else:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


@dp.message(Command(commands='get_statham_db'), F.from_user.id.in_(get_users()))
async def send_statham_db(message: Message):
    db = get_statham_db()
    if db is None or len(db) == 0:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞')
        return
    txt = map(str, db)
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096])


@dp.message(Command(commands='getcoms'), F.from_user.id.in_(get_users()))
async def get_all_commands(message: Message):
    txt = '/start\n/help\n/stat\n/anon\n/info\n/quote\n/del_...\n/ban_...\n/send_..\n/send_all\n/send_incels\n/send_topincels\n/cs_...\n/cavg_...\n/new_quote\n/remove_quote ...\n/queue\n/wasted_time\n/backup\n/get_statham_db\n/send_tier_list\n/upd_groupnames\n/avgs\n/upd_file\n/delete_tier_list\n/get_users\n/get_users_info_db\n/get_weekly_db\n/get_latest_sluts\n/get_sluts_db\n/weekly_off\n/weekly_on\n/clear_queue\n/clear_states\n/clear_admin_queues\n/get_ban\n/password_yaincel\n/public_queue\n/getcoms\n/about'
    await message.answer(text=txt, reply_markup=get_keyboard(message.from_user.id))


@dp.message(Command(commands='get_weekly_db'))
async def send_weekly_db(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        db = get_weekly_db_info()
        if db is None:
            await message.answer(text='–ë–î –ø—É—Å—Ç–∞')
            return
        txt = str(db)
        for i in range((len(txt) + 4096) // 4096):
            await message.answer(text=txt[i * 4096:(i + 1) * 4096])


@dp.message(Command(commands='weekly_off'))
async def weekly_cancel_func(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        weekly_cancel(message.from_user.id)
        await message.answer(text='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–∏—Ä –ª–∏—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')


@dp.message(Command(commands='weekly_on'))
async def send_users_db_func(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π')
    else:
        weekly_resume(message.from_user.id)
        await message.answer(text='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–∏—Ä –ª–∏—Å—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞')


@dp.message(Command(commands='get_ban'))
async def ban_user(message: Message, state: FSMContext):
    get_ban(message.from_user.id)
    await message.answer(text='–¢—ã –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–æ—Ö? –†–µ–∂–∏–º –º–∏–ª–æ–π —Ç—è–Ω–æ—á–∫–∏ –≤–∫–ª—é—á—ë–Ω', reply_markup=ReplyKeyboardRemove())
    await state.set_state(FSMFillForm.banned)


@dp.message(Command(commands='get_sluts_db'))
async def send_sluts_db(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        if get_sluts_db() is None:
            await message.answer(text='–ë–î –ø—É—Å—Ç–∞')
            return
        txt = map(str, get_sluts_db())
        txt = '\n'.join(txt)
        for i in range((len(txt) + 4096) // 4096):
            await message.answer(text=txt[i * 4096:(i + 1) * 4096])


@dp.message(Command(commands='get_latest_sluts'))
async def send_latest_sluts_db(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–ò–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        sluts_list = get_sluts_db()
        if sluts_list is None:
            await message.answer(text='–ë–î –ø—É—Å—Ç–∞')
            return
        sluts_list = sluts_list[-5:]
        sluts_last3 = []
        txt = ''
        for i in iter(sluts_list):
            if i[2] is None:
                rates = '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'
            else:
                rates = '<b>–û—Ü–µ–Ω–∫–∏:</b><blockquote>'
                for key, value in json.loads(i[2]).items():
                    rates += f'<i>{key}</i> ‚Äì {value}, '
                rates = rates[:-2] + '</blockquote>'
            if i[1] is None or len(i[1]) == 0 :
                caption = ''
            else:
                caption = f'"<i>{i[1]}</i>" | '
            name = i[-1]
            name = '@' + name if name[0] != 'üë•' else f'üë• <a href="vk.com/{name[2:]}">{name[:name.find("?")][2:]}</a>'
            txt += f'‚Ññ {i[0]} –ê–≤—Ç–æ—Ä: {name} | {caption}{rates}\n'
        await message.answer(text=txt, disable_web_page_preview=True)


@dp.message(F.content_type.in_({ContentType.PHOTO, ContentType.TEXT}), StateFilter(FSMFillForm.sendQuote))
async def insert_new_quote(message: Message, state: FSMContext):
    await state.clear()
    if message.text:
        insert_quote(photo=None, caption=message.text)
    else:
        file_id = message.photo[-1].file_id
        insert_quote(photo=file_id, caption=message.caption)
    await message.answer(text='–¶–∏—Ç–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ üëç')


@dp.message(F.text == '—è–∏–Ω—Ü–µ–ª')
async def get_verified(message: Message, state: FSMContext):
    set_verified(id=message.from_user.id)
    await message.answer(
        text='<b>–ü—Ä–∏–≤–µ—Ç, —É—ë–±–∏—â–µ!</b>\n–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ –µ–≥–æ —Å–º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, —Å–¥–µ–ª–∞–π –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ <b><a href="https://t.me/+D_c0v8cHybY2ODQy">–∫–∞–Ω–∞–ª–µ</a></b> –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Ñ–æ—Ç–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å <b>/anon</b>, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ñ–æ—Ç–æ –ø–æ–ø–∞–ª–æ –≤ <b><a href="https://t.me/rateimage">–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª</a></b>',
        disable_web_page_preview=True, reply_markup=get_keyboard(message.from_user.id))
    await state.set_state(FSMFillForm.verified)


@dp.message(F.photo, StateFilter(FSMFillForm.sending_photo))
async def get_photo_by_button(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)
    add_girlphoto(message.from_user.id, last_num + 1)
    await message.answer(text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª!',
                         reply_markup=get_rates_keyboard(last_num + 1, 0))
    await state.clear()


@dp.message(F.text == '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ', StateFilter(FSMFillForm.sending_photo))
async def cancel_sending(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–¢—ã –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ')
    add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(~F.photo, StateFilter(FSMFillForm.sending_photo))
async def invalid_type_photo(message: Message, state: FSMContext):
    await message.answer(text='–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –¥–æ–ª–±–æ—ë–±?', reply_markup=keyboard3)


async def send_photo_to_users(origin_user, num: int):
    for user in get_users():
        if user == origin_user:
            continue
        add_to_queue(user, num)
        if get_current_state(user) != 0:
            continue
        add_current_state(user, num)
        await bot.send_photo(user, get_photo_id_by_id(num), reply_markup=get_rates_keyboard(num=num, mailing=1))
        states_users[user] = datetime.datetime.now()


# @dp.message(F.text, StateFilter(FSMFillForm.inserting_comment))
# async def get_note_main(message: Message, state: FSMContext):
#     add_note(get_last_commit(message.from_user.id), message.text)
#     await message.answer(
#         text=f'–û—Ö—É–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: <b><i>{message.text}</i></b>. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>',
#         disable_web_page_preview=True, reply_markup=basic_keyboard)
#     await send_photo_to_users(message.from_user.id, get_last_commit(message.from_user.id))
#     await state.clear()
#     add_current_state(message.from_user.id, 0, message.from_user.username)





@dp.message(F.text == '–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
async def send_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        if result[1] == -1:
            await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                                 reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        await message.answer('–ù—É —Ç–∞–∫ –ø—Ä–∏—à–ª–∏ –µ–≥–æ', reply_markup=ReplyKeyboardRemove())
        return
    await message.answer(text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ', reply_markup=keyboard3)
    await state.set_state(FSMFillForm.sending_photo)


@dp.message(StateFilter(FSMFillForm.rating))
async def remember_to_rate(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É, —Å—É–∫–∞!')


@dp.message(F.photo, ~StateFilter(FSMFillForm.sendDM))
async def default_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    file_id = message.photo[-1].file_id
    if not result[0]:
        if result[1] == -1:
            await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                                 reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        min_num = get_min()
        add_photo_id(min_num - 1, file_id, message.from_user.username)
        add_girlphoto(message.from_user.id, min_num - 1)
        caption = '' if message.caption is None else message.caption
        if caption != '':
            add_note(min_num - 1, message.caption)

        try:
            if check_new_user(message.from_user.id):
                await message.answer(replicas['warning'])
            note = '' if (message.caption is None or message.caption.replace('/anon', '').strip() == '') else f'\n–ü–æ–¥–ø–∏—Å—å: <i>"{message.caption.replace("/anon", "")}"</i>'
            if message.caption is None or '/anon' not in message.caption:
                text = 'üôãüèº‚Äç‚ôÄÔ∏è –í—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –∫–∞–Ω–∞–ª'
            else:
                text = 'üôÖüèº‚Äç‚ôÄÔ∏è –ù–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –∫–∞–Ω–∞–ª'
            await message.answer(text=f'{random.choice(emoji_lol)} –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º!{note}\n<b>{text}</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ?',
                                 reply_markup=confirm_keyboard(min_num - 1))
        except Exception as e:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 12\n{str(e)}')
        return

    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)
    add_girlphoto(message.from_user.id, last_num + 1)
    if message.caption:
        await message.answer(
            text=f'–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —Å –∑–∞–º–µ—Ç–∫–æ–π: <i>{message.caption}</i>. –û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
            reply_markup=get_rates_keyboard(last_num + 1, 0))
        add_note(last_num + 1, message.caption)
    else:
        await message.answer(
            text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
            reply_markup=get_rates_keyboard(last_num + 1, 0))


@dp.message(F.text == '–§–æ—Ç–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ üåÜ')
async def resend_photo(message: Message):
    await send_incel_photo(user_id=message.from_user.id)


@dp.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä', ~StateFilter(FSMFillForm.rating))
async def stat_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        if result[1] == -1:
            await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                                 reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        not_incel_rates = get_avgs_not_incel(message.from_user.id)
        if len(not_incel_rates) > 5:
            async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_photo'):
                user_id = message.from_user.id
                get_statistics_not_incel(user_id)
                photo = InputMediaPhoto(media=FSInputFile(f'myplot_{user_id}2.png'), caption='–ì—Ä–∞—Ñ–∏–∫')
                photo2 = InputMediaPhoto(media=FSInputFile(f'myplot_{user_id}.png'), caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
                media = [photo, photo2]
                await bot.send_media_group(media=media, chat_id=message.from_user.id)
                os.remove(f'myplot_{user_id}.png')
                os.remove(f'myplot_{user_id}2.png')
        else:
            await message.answer(text=f'üì∂ –ü—Ä–∏—à–ª–∏ <b>–Ω–µ –º–µ–Ω–µ–µ 6 —Ñ–æ—Ç–æ</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏—Å–ª–∞—Ç—å {6 - len(not_incel_rates)}', reply_markup=get_keyboard(message.from_user.id))
        return
    if len_photos_by_username(message.from_user.username) > 0:
        async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_photo'):
            username = message.from_user.username
            get_statistics(username)
            photo = InputMediaPhoto(media=FSInputFile(f'myplot_{username}2.png'), caption='–ì—Ä–∞—Ñ–∏–∫')
            photo2 = InputMediaPhoto(media=FSInputFile(f'myplot_{username}.png'), caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
            media = [photo, photo2]
            await bot.send_media_group(media=media, chat_id=message.from_user.id)
            os.remove(f'myplot_{username}.png')
            os.remove(f'myplot_{username}2.png')
        votes = len(get_votes(max_photo_id_by_username(username)).keys())
        users = len(get_users())
        if votes > users:
            users = votes
        stats = get_avg_stats(message.from_user.id)
        avg = ''
        if stats:
            avg_float = stats[1] / stats[2] if stats[2] != 0 else 0
            avg = f'\nC—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <b>{"{:.2f}".format(avg_float)}</b> ' + emoji[round(avg_float)]
            overshoot = stats[3]
            hit = stats[4]
            last_incel = stats[6]
            if overshoot in (11, 12, 13, 14):
                ending = '—Ä–∞–∑'
            elif overshoot % 10 == 1:
                ending = '—Ä–∞–∑'
            elif overshoot % 10 in (2, 3, 4):
                ending = '—Ä–∞–∑–∞'
            else:
                ending = '—Ä–∞–∑'
            percentage = '0.00' if stats[5] == 0 else "{:.2f}".format(hit / stats[5] * 100)
            if float(percentage) > 30:
                emoji_local = 'ü§Ø'
            else:
                emoji_local = 'üôÇ'
            if last_incel < get_large_last_incel():
                emoji_local2 = 'üëç'
            else:
                emoji_local2 = 'üëé'
            if last_incel in (11, 12, 13, 14):
                ending3 = '—Ä–∞–∑'
            elif last_incel % 10 == 1:
                ending3 = '—Ä–∞–∑'
            elif last_incel % 10 in (2, 3, 4):
                ending3 = '—Ä–∞–∑–∞'
            else:
                ending3 = '—Ä–∞–∑'
            extra = f'–ü–µ—Ä–µ–æ–±—É–ª—Å—è: <b>{overshoot} {ending}</b> {["ü§°", "üë†"][overshoot < get_large_overshoot()]}\n–ü—Ä–æ—Ü–µ–Ω—Ç —É–≥–∞–¥–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: <b>{percentage}%</b> {emoji_local}\n–û–∫–∞–∑–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º: <b>{last_incel} {ending3}</b> {emoji_local2}\n–ü—Ä–æ—ë–±–∞–Ω–æ: <b>{convert_unix_time(stats[8])}</b>'
        await message.answer(text=f'–¢–≤–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ {votes}/{users} —á–µ–ª–æ–≤–µ–∫' + avg + '\n' + extra)
    else:
        await message.answer(text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ç–æ')


@dp.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É ‚úèÔ∏è', ~StateFilter(FSMFillForm.rating))
async def change_last_rate(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        if result[1] == -1:
            await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                                 reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
        await message.answer('–ë–ª—è, –∏–¥–∏ –Ω–∞—Ö—É–π —Ä–µ–∞–ª—å–Ω–æ!', reply_markup=get_keyboard(message.from_user.id))
        return
    last_rate = get_last_rate(message.from_user.id)
    if last_rate == 0 or last_rate == 5:
        await message.answer(text='–¢—ã –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª —á—É–∂–∏—Ö —Ñ–æ—Ç–æ!')
        return
    add_overshoot(message.from_user.id)
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_photo'):
        await bot.send_photo(chat_id=message.from_user.id, photo=get_photo_id_by_id(last_rate),
                             reply_markup=get_rates_keyboard(last_rate, 2), caption='–ù—É –¥–∞–≤–∞–π, –ø–µ—Ä–µ–æ–±—É–π—Å—è, —Ç–≤–∞—Ä—å!')


@dp.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', F.from_user.id.in_(get_users()))
async def settings_button(message: Message):
    user_id = message.from_user.id
    if user_id not in get_admins():
        await message.answer(text='–ò–∑–≤–∏–Ω–∏, —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω, –ª–æ—Ö!', reply_markup=basic_keyboard)
        return
    await message.answer(text=get_text_of_settings(message.from_user.id), disable_web_page_preview=True,
                         reply_markup=get_admin_keyboard(user_id))

@dp.message(StateFilter(FSMFillForm.sendDM))
async def send_dm_func(message: Message, state: FSMContext):
    if current_dm_id.get(message.from_user.id, 0) == 0:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=get_keyboard(message.from_user.id))
        await state.clear()
        return
    if current_dm_id.get(message.from_user.id, 0) == -1:
        current_dm_id[message.from_user.id] = 0
        await state.clear()
        not_incel_ids: set = get_not_incel()
        successfully_sent = 0
        for id_local in not_incel_ids:
            try:
                await bot.copy_message(chat_id=id_local, message_id=message.message_id,
                                       from_chat_id=message.chat.id)
                successfully_sent += 1
            except Exception as e:
                pass
        await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successfully_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é(-—è–º)')
        return
    if current_dm_id.get(message.from_user.id, 0) == -2:
        current_dm_id[message.from_user.id] = 0
        await state.clear()
        incels: set = get_users()
        successfully_sent = 0
        for id_local in incels:
            try:
                await bot.copy_message(chat_id=id_local, message_id=message.message_id,
                                       from_chat_id=message.chat.id)
                successfully_sent += 1
            except Exception as e:
                pass
        await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successfully_sent} –∏–Ω—Ü–µ–ª—É(-–∞–º)')
        return
    if current_dm_id.get(message.from_user.id, 0) == -3:
        current_dm_id[message.from_user.id] = 0
        await state.clear()
        incels: set = get_users()
        successfully_sent = 0
        for id_local in incels:
            if id_local in (955289704):
                continue
            try:
                await bot.copy_message(chat_id=id_local, message_id=message.message_id,
                                       from_chat_id=message.chat.id)
                successfully_sent += 1
            except Exception as e:
                pass
        await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successfully_sent} –∏–Ω—Ü–µ–ª—É(-–∞–º)')
        return
    try:
        await bot.copy_message(chat_id=current_dm_id[message.from_user.id], message_id=message.message_id,
                               from_chat_id=message.chat.id)
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ üò∞')
    current_dm_id[message.from_user.id] = 0
    await state.clear()


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '—Å–ø–∞—Å–∏–±–æ' or message.text.lower() == '–æ—Ç –¥—É—à–∏' or message.text.lower() == '–±–ª–∞–≥–æ–¥–∞—Ä—é' or message.text.lower() == '—Å–ø—Å'))
async def u_r_wellcome(message: Message):
    await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                   reaction=[ReactionTypeEmoji(emoji='‚ù§Ô∏è')], is_big=True)
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKShplAfTsN4pzL4pB_yuGKGksXz2oywACZQEAAnY3dj9hlcwZRAnaOjAE', reply_to_message_id=message.message_id)
    # for i in range(len(replicas['banned'])):
    #     await message.answer(random.choice(emoji_banned) + ' ' + replicas['banned'][i].replace('$', '"'),
    # #                          reply_markup=ReplyKeyboardRemove())
    # await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
    #                      reply_markup=ReplyKeyboardRemove())


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '–∏–¥–∏ –Ω–∞—Ö—É–π' or message.text.lower() == '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π' or message.text.lower() == '–∏–¥–∏ –Ω–∞ —Ö—É–π' or message.text.lower() == '—Å—É–∫–∞'))
async def fuckoff(message):
    await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                   reaction=[ReactionTypeEmoji(emoji='ü§°')], is_big=True)
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKSrVlAiPwEKrocvOADTQWgKGACLGGlwAChAEAAnY3dj_hnFOGe-uonzAE')


@dp.message(lambda message: message.text is not None and message.text.lower() == '—è –≥–µ–π')
async def ik(message):
    await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                   reaction=[ReactionTypeEmoji(emoji='üíÖ')], is_big=True)
    await message.answer('–Ø –∑–Ω–∞—é', reply_to_message_id=message.message_id)


@dp.message(F.text == '–¶–∏—Ç–∞—Ç–∞ üí¨')
async def incel_get_quote(message: Message):
    await quote(message)


@dp.message(F.dice)
async def dice_message(message: Message):
    emoji = message.dice.emoji
    score = message.dice.value
    await asyncio.sleep(3)
    if score >= dice_points[emoji]:
        await message.answer(text=random.choice(replicas['grats']))
        if emoji == 'üé∞':
            await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                           reaction=[ReactionTypeEmoji(emoji='ü§Ø')], is_big=True)
            await bot.send_sticker(chat_id=message.chat.id,
                                   sticker='CAACAgIAAxkBAAELO0dlrmyiCn3T4rSpqM3zyjNv2ksI5AACowADDPlNDMG5-fZfTkbJNAQ')
    else:
        await message.answer(text=random.choice(replicas['regret']))


@dp.message()
async def any_message(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0] and result[1] != -1:
        if message.text:
            pass
            #await bot.send_message(chat_id=972753303, text=f'<i>@{message.from_user.username}:</i>\n"{message.text}"', disable_notification=True)
        elif message.video or message.animation:
            caption = '' if message.caption is None else f':\n"{message.caption}"'
            await bot.copy_message(from_chat_id=message.chat.id, chat_id=972753303, message_id=message.message_id, disable_notification=True,
                               caption=f'<i>@{message.from_user.username}</i>{caption}')
    if not result[0] and result[1] == -1:
        await message.answer(random.choice(emoji_banned) + ' ' + random.choice(replicas['banned']).replace('$', '"'),
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.banned)
        return
    if message.sticker:
        if random.randint(1, 100) < 5:
            await message.answer('–ê –∫–∞–∫ —Ç–µ–±–µ –º–æ–π —Å—Ç–∏–∫–µ—Ä?')
            await bot.send_sticker(chat_id=message.chat.id, sticker='CAACAgIAAxkBAAELwF1l-pvCWkbiwxyH-htdYp3sFx9-BQACHgADUWPTK8qfqjqR5o-iNAQ')
            await message.answer('–í —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö —è –ª—É—á—à–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å.')
        else:
            extra = [
                f"üí¨ –û—Ü–µ–Ω–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: <b>{round(random.uniform(4, 9), 2)}</b> –∏–∑ <b>10</b>. –®—É—á—É, –º–æ–≥—É —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å.",
                f"–°—Ç–∏–∫–µ—Ä–æ–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ—á–∫—É, –Ω–æ –º–æ–∂–Ω–æ —ç—Ç–∏–º —ç–º–æ–¥–∑–∏ {message.sticker.emoji}",
                f"–ú–æ–∂–µ—à—å –≤–º–µ—Å—Ç–æ —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å —ç—Ç–∏–º —ç–º–æ–¥–∑–∏ {message.sticker.emoji}",
                f"–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –≤–∏–∂—É –∫–∞—Ä—Ç–∏–Ω–∫—É, —è –≤–∏–∂—É —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ {message.sticker.emoji}. –¢–∞–∫ —á—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è —É–≤–∏–¥–µ–ª.",
                f"–î–∞–≤–∞–π —Ç—ã –∏–∑–æ–±—Ä–∞–∑–∏—à—å —ç—Ç—É —ç–º–æ—Ü–∏—é {message.sticker.emoji} –Ω–∞ —Ñ–æ—Ç–æ—á–∫–µ."]
            await message.answer(
                random.choice(replicas.get('sticker', ['–°—Ç–∏–∫–µ—Ä—ã ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ñ–æ—Ç–æ—á–∫–∏']) + extra).replace('$', '"'),
                disable_web_page_preview=True)
    elif message.video:
        extra = [f"üòÑ –û—Ü–µ–Ω–∫–∞ –≤–∏–¥–µ–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: <b>{round(random.uniform(4, 9), 2)}</b> –∏–∑ <b>10</b>. –®—É—á—É, –º–æ–≥—É —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å."]
        await message.answer(random.choice(replicas.get('video', ['–í–∏–¥–µ–æ ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ñ–æ—Ç–æ—á–∫–∏']) + extra).replace('$', '"'),
                             disable_web_page_preview=True)
    elif message.video_note:
        extra = [f"üòÑ –û—Ü–µ–Ω–∫–∞ –∫—Ä—É–∂–æ—á–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: <b>{round(random.uniform(4, 9), 2)}</b> –∏–∑ <b>10</b>. –®—É—á—É, –º–æ–≥—É —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å."]
        await message.answer(random.choice(replicas.get('video_note', ['–ö—Ä—É–∂–æ—á–∫–∏ ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ñ–æ—Ç–æ—á–∫–∏']) + extra).replace('$', '"'),
                             disable_web_page_preview=True)
    elif message.voice:
        if random.randint(1, 100) < 5:
            duration = message.voice.duration
            if duration in (11, 12, 13, 14):
                ending = '—Å–µ–∫—É–Ω–¥'
            elif duration % 10 == 1:
                ending = '—Å–µ–∫—É–Ω–¥–∞'
            elif duration % 10 in (2, 3, 4):
                ending = '—Å–µ–∫—É–Ω–¥—ã'
            else:
                ending = '—Å–µ–∫—É–Ω–¥'
            extra = f'–ü–æ—á–µ–º—É —Ç–æ–ª—å–∫–æ {duration} {ending}? ü•∫ –Ø –≥–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–π –≥–æ–ª–æ—Å –≤–µ—á–Ω–æ! –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫–∏–Ω–µ—à—å —Ñ–æ—Ç–æ—á–∫—É'
            await message.answer(extra, disable_web_page_preview=True)
            return
        await message.answer(random.choice(replicas['voice']).replace('$', '"'), disable_web_page_preview=True)
    elif message.document:
        if 'image' in message.document.mime_type:
            await message.answer('–°–∫–∏–Ω—å —ç—Ç—É –∂–µ —Ñ–æ—Ç–æ—á–∫—É —Å–æ —Å–∂–∞—Ç–∏–µ–º ü•∫')
            return
        extra = 'üóæüéëüèûüåÖüåÑüå†üéáüéÜüåáüåÜüèôüåÉüååüåâüåÅü©ª'
        await message.answer(
            random.choice(extra) + ' ' + random.choice(replicas.get('doc', ['–§–∞–π–ª ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ñ–æ—Ç–æ—á–∫–∏'])).replace('$', '"'),
            disable_web_page_preview=True)
    elif message.text:
        disabled = ['üßë‚Äçü¶Ω', 'üë®‚Äçü¶Ω', 'üë®‚Äçü¶º', 'üßë‚Äçü¶º', 'üë©‚Äçü¶Ω']
        for i in disabled:
            if i in message.text:
                anecdotes = [
                    '–ò–¥—É—Ç —Ç—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞ –ø–æ –ø—É—Å—Ç—ã–Ω–µ.\n–°–ª–µ–ø–æ–π, –±–µ–∑—Ä—É–∫–∏–π –∏ –∫–æ–ª—è—Å–æ—á–Ω–∏–∫.\n–ò–¥—É—Ç –∏–¥—É—Ç –∏ –≤–∏–¥—è—Ç –æ–∞–∑–∏—Å. –ù—É –±–µ–∑—Ä—É–∫–∏–π —Ç—É–¥–∞ –Ω—ã—Ä—è–µ—Ç. –í—ã–ª–∞–∑–∏—Ç –∏ –≤–∏–¥–∏—Ç, —á—Ç–æ —É –Ω–µ–≥–æ —Ä—É–∫–∏ –≤—ã—Ä–æ—Å–ª–∏. –ì–æ–≤–æ—Ä–∏—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–º —á—Ç–æ –æ–Ω –≤–æ–ª—à–µ–±–Ω—ã–π –∏ —Å—Ä–∞–∑—É –∑–∞ –Ω–∏–º —Ç—É–¥–∞ –Ω—ã—Ä–Ω—É–ª —Å–ª–µ–ø–æ–π. –í—ã–ª–∞–∑–∏—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç:\n‚Äî –ë—Ä–∞—Ç—Ü—ã, —è —Ç–µ–ø–µ—Ä—å –≤–∏–∂—É\n–ê –∑–∞ –Ω–∏–º —Å–æ –≤—Å–µ—Ö —Å–∏–ª –∫–æ–≤—ã–ª—è–µ—Ç –¥–æ –æ–∞–∑–∏—Å–∞ –∫–æ–ª—è—Å–æ—á–Ω–∏–∫. –ù—ã—Ä—è–µ—Ç.\n–í—ã–ª–µ–∑–∞–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç:\n‚Äî –£ –º–µ–Ω—è, –±–ª—è—Ç—å, —Ç–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ –ø–æ–∫—Ä—ã—à–∫–∏.',
                    '–ù–∞ —Å—ä–µ–∑–¥ –∏–Ω–≤–∞–ª–∏–¥–æ–≤-–∫–æ–ª—è—Å–æ—á–Ω–∏–∫–æ–≤ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—à—ë–ª.']
                await message.answer(text=random.choice(anecdotes),
                                     reply_markup=get_keyboard(message.from_user.id))
                return
        await message.answer(text=random.choice(replicas.get('unknown', hz_answers)).replace('$', '"'),
                             reply_markup=get_keyboard(message.from_user.id), disable_web_page_preview=True)
    else:
        await message.answer(text=random.choice(hz_answers), reply_markup=not_incel_keyboard)


@dp.callback_query()
async def any_callback(callback: CallbackQuery):
    print(callback)


async def weekly_tierlist(user=972753303):
    try:
        async with ChatActionSender(bot=bot, chat_id=972753303, action='upload_document'):
            doc = InputMediaDocument(media=FSInputFile("slutsDB.db"))
            doc2 = InputMediaDocument(media=FSInputFile("usersDB.db"))
            doc3 = InputMediaDocument(media=FSInputFile("weekly.db"))
            doc4 = InputMediaDocument(media=FSInputFile("weekly_info.db"))
            doc5 = InputMediaDocument(media=FSInputFile("admins.db"))
            doc6 = InputMediaDocument(media=FSInputFile("emoji.db"))
            doc7 = InputMediaDocument(media=FSInputFile("statham.db"),
                                      caption=f'–ë—ç–∫–∞–ø <i>{datetime.datetime.now().date()}</i>')
            await bot.send_media_group(media=[doc, doc2, doc3, doc4, doc5, doc6, doc7], chat_id=message.chat.id)
    except Exception as e:
        await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞\n{e}')
    async with ChatActionSender(bot=bot, chat_id=972753303):
        d = get_weekly_db()
        new_d = {}
        cnt = 1
        for key, values in d.items():
            for value in values:
                if value[:4]=='http':
                    try:
                        response = requests.get(value)
                        if response.status_code == 200:
                            with open(f"test_{cnt}.jpg", "wb") as file:
                                file.write(response.content)
                    except Exception as e:
                        await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 13\n{e}')
                else:
                    f = await bot.get_file(value)
                    f_path = f.file_path
                    await bot.download_file(f_path, f"test_{cnt}.jpg")
                new_d[key] = [f"test_{cnt}.jpg"] + new_d.get(key, [])
                cnt += 1
        image_path = Path(f"test_{cnt}.jpg").resolve()
        try:
            res = draw_tier_list(new_d)
        except Exception as e:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏—Ä –ª–∏—Å—Ç–∞\n{e}')
        for i in range(1, cnt):
            try:
                os.remove(f"test_{i}.jpg")
            except Exception as e:
                image_path = Path(f"test_{i}.jpg").resolve()
                await bot.send_message(chat_id=972753303, text=f'{e}\n–ü–∞–ø–∫–∞, –≥–¥–µ –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª—ã: {image_path}')
        if get_weekly(972753303):
            try:
                media = []
                for path in res[1]:
                    capt = '<b>–¢–∏—Ä –ª–∏—Å—Ç ‚ù§Ô∏è</b>'
                    media.append(InputMediaPhoto(media=path, caption=capt))
                await bot.send_media_group(chat_id=channel_id, media=media)
            except:
                await bot.send_message(chat_id=972753303, text=f'{e}\n–ü–∞–ø–∫–∞, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏—Ä–ª–∏—Å—Ç: {image_path}')
        else:
            await bot.send_message(chat_id=user, text='–¢–∏—Ä –ª–∏—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω!')
        try:
            client = yadisk.Client(token=ya_token)
            with client:
                cnt = 0
                for path in res[1]:
                    client.upload(path.replace('_compressed', ''), f"/incel/tier-list_{datetime.datetime.now().date()}-{cnt}.png", overwrite=True)
                    cnt+=1
            await bot.send_message(chat_id=user, text=f'–ó–∞–ª–∏–ª —Ç–∏—Ä –ª–∏—Å—Ç –≤ –µ–±–µ–π—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ <b><a href="https://disk.yandex.ru/d/0fhOxQsjp4yqSQ">—Å—é–¥–∞</a></b>\n\n–ë—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ <b>{res[0]}</b> —Ñ–æ—Ç–æ–∫', disable_web_page_preview=True)
        except Exception as e:
            image_path = Path("tier_list.png").resolve()
            await bot.send_message(chat_id=972753303, text=f'{e}\n–ü–∞–ø–∫–∞, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏—Ä–ª–∏—Å—Ç: {image_path}')
        for path in res[1]:
            os.remove(path.replace('_compressed', ''))
            os.remove(path)


async def post_public():
    for i in range(random.randint(1, 3)):
        num = get_min_from_public_info()
        delete_from_queue_public_info(num)
        votes = get_votes(num)
        if len(votes.keys()) == 0:
            continue
        photo = get_photo_id_by_id(num)
        if photo[:4] == 'http':
            try:
                response = requests.get(photo)
                if response.status_code == 200:
                    with open(f"public_photo.jpg", "wb") as file:
                        file.write(response.content)
            except Exception as e:
                await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 4325\n{e}')
        else:
            f = await bot.get_file(photo)
            await bot.download_file(f.file_path, f"public_photo.jpg")
        colors = list(get_colors('public_photo.jpg'))
        emoji_colors = colors[:5]
        for j in emoji_colors:
            if j[1] > 40:
                emoji_colors = [color_names[j[0]]]
                break
        else:
            emoji_colors = [color_names[j[0]] for j in emoji_colors if j[1] > 7]
        c = search_emoji_by_colors(emoji_colors)
        os.remove(f"public_photo.jpg")


        avg = sum(votes.values()) / len(votes.keys())
        avg_public = min(avg + 2, 10)
        avg_str_public = '{:.2f}'.format(avg_public)
        rounded_public = round(avg_public)
        note_str_origin = get_note_sql(num)
        note_str = f'<blockquote>{note_str_origin}</blockquote>\n' if note_str_origin else ''
        txt2 = note_str + f'{c} <a href="https://t.me/RatePhotosBot">–û—Ü–µ–Ω–µ–Ω–æ</a> –Ω–∞ <b>{avg_str_public}</b> –∏–∑ <b>10</b>' + f'\n<i>{rate3[rounded_public]}</i>'
        await bot.send_photo(chat_id=channel_id_public, photo=photo, caption=txt2)


async def notify():
    for user in get_users():
        q = get_queue(user)
        if len(q) == 0:
            continue
        if get_current_state(user) == 0:
            await send_incel_photo(user_id=user)
        if states_users.get(user, None) is None or states_users[user] + datetime.timedelta(
                hours=1) < datetime.datetime.now():
            await bot.send_message(chat_id=user, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n<b>–æ—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, —Ç–≤–∞—Ä—å ü§¨</b>',
                                   reply_markup=get_keyboard(user))
            states_users[user] = datetime.datetime.now()


async def main():
    try:
        today = datetime.date.today()
        for user in get_top_incels():
            date = get_birthday(user)
            birthdate = datetime.datetime.fromtimestamp(date).date()
            birthday_this_year = birthdate.replace(year=today.year)
            if birthday_this_year < today:
                birthday_this_year = birthday_this_year.replace(year=today.year + 1)

            days_until_birthday = (birthday_this_year - today).days

            if days_until_birthday == 7 or days_until_birthday == 1:
                for user_local in get_top_incels() - {user}:
                    await bot.send_message(chat_id=user_local,
                                           text=f'–£ –∏–Ω—Ü–µ–ª–∞ <b>@{get_username_by_id(user)}</b> —Å–∫–æ—Ä–æ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è ({birthdate.strftime("%d.%m.%Y")}), {["–æ—Å—Ç–∞–ª–æ—Å—å", "–æ—Å—Ç–∞–ª—Å—è"][days_until_birthday == 1]} {days_until_birthday} {["–¥–Ω–µ–π", "–¥–µ–Ω—å"][days_until_birthday == 1]}!')
            elif days_until_birthday == 0:

                for user_local in get_top_incels() - {user}:
                    await bot.send_message(chat_id=user_local,
                                           text=f'–£ –∏–Ω—Ü–µ–ª–∞ <b>@{get_username_by_id(user)}</b> —Å–µ–≥–æ–¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è! <b>–ü–æ–∑–¥—Ä–∞–≤—å –∏–Ω—Ü–µ–ª–∞!</b>\n–ú—É–∂–∏–∫—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å <b>{today.year - birthdate.year}</b>!')
    except Exception as e:
        await bot.send_message(chat_id=972753303, text=f'–û—à–∏–±–∫–∞! –ö–æ–¥ 322\n{e}')
    scheduler: AsyncIOScheduler = AsyncIOScheduler(timezone=str(tzlocal.get_localzone()))
    scheduler.add_job(notify, trigger='cron', hour='9-22/6', minute=0)
    scheduler.add_job(post_public, 'cron', hour='*', minute=30)
    scheduler.add_job(weekly_tierlist, trigger=CronTrigger(day_of_week='sun', hour=20, minute=40))

    day_of_week_list = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
    for admin in get_admins():
        sets = get_settings(admin)
        days = get_weekdays(admin)
        for i in days:
            trigger = CronTrigger(day_of_week=day_of_week_list[i - 1], hour=int(sets[4]), minute=int(sets[5]))
            scheduler.add_job(notify_admin, trigger=trigger, args=(admin,))

    scheduler.start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –í–∞—Å —Å —é–º–æ—Ä–æ–º –Ω–∞ –ø–æ–ª–Ω—É—é –∫–∞—Ç—É—à–∫—É!')
    asyncio.run(main())
