#
#        _   _  _  _            _               _
#       | \ | |(_)| |          | |             | |
#       |  \| | _ | | __  ___  | |  ___  _ __  | | __  ___
#       | . ` || || |/ / / _ \ | | / _ \| '_ \ | |/ / / _ \
#       | |\  || ||   < | (_) || ||  __/| | | ||   < | (_) |
#       \_| \_/|_||_|\_\ \___/ |_| \___||_| |_||_|\_\ \___/
#                                _      _     _        _
#                               | |    (_)   (_)      (_)
#        _ __ ___    ___  _ __  | |__   _     _   ___  _  ___
#       | '_ ` _ \  / _ \| '_ \ | '_ \ | |   | | / __|| |/ __|
#       | | | | | ||  __/| |_) || | | || |   | || (__ | |\__ \
#       |_| |_| |_| \___|| .__/ |_| |_||_|   |_| \___||_||___/
#                        | |
#                        |_|

import asyncio
import calendar
import datetime
import json
import os
import time

import requests
import random
from typing import List, Dict
from pathlib import Path

import tzlocal
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter, BaseFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType,
                           MessageReactionUpdated)
from aiogram.types.reaction_type_emoji import ReactionTypeEmoji
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv, find_dotenv
from aiogram.client.session.aiohttp import AiohttpSession
from sql_db import check_id, reduce_attempts, set_verified, add_girlphoto, get_users, get_last_commit, \
    add_current_state, get_current_state, add_to_queue, delete_from_queue, get_queue, get_usersinfo_db, \
    get_username_by_id, insert_last_rate, get_last_rate, get_ban, delete_row, get_id_by_username, check_user, \
    get_not_incel
from sql_photos import get_last, add_photo_id, add_rate, add_note, get_photo_id_by_id, get_note_sql, get_votes, \
    get_origin, max_photo_id_among_all, len_photos_by_username, max_photo_id_by_username, get_sluts_db
from graphics import get_statistics
from weekly_rates import add_to_weekly, clear_db, get_weekly_db, get_weekly, weekly_cancel, weekly_resume, \
    get_weekly_db_info
from tier_list import draw_tier_list
from statham import get_randQuote, insert_quote, get_statham_db, del_quote

load_dotenv(find_dotenv())

API_TOKEN: str = os.getenv('TOKEN')
channel_id = os.getenv('CHANNEL_ID')
storage: MemoryStorage = MemoryStorage()
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp: Dispatcher = Dispatcher(storage=storage)
current_dm_id={}
states_users = {}
legendary_quote = '–ù–∞–∑–≤–∞–ª—Å—è –≥—Ä—É–∑–¥–µ–º ‚Äî –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–ù–µ —Å–¥–µ–ª–∞–ª –¥–µ–ª–æ ‚Äî –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–ò –±–∞–±–∞ —Å –≤–æ–∑—É –ø–æ—à–ª–∞ –Ω–∞ —Ö—É–π\n–ò –≤–æ–ª–∫–∏ –Ω–∞ —Ö—É–π, –∏ –æ–≤—Ü—ã –Ω–∞ —Ö—É–π\n\n–•–æ—Ç–µ–ª –∫–∞–∫ –ª—É—á—à–µ, –∞ –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–î–∞—é—Ç ‚Äî –±–µ—Ä–∏, –∞ –±—å—é—Ç ‚Äî –∏–¥–∏ –Ω–∞ —Ö—É–π\n–î—Ä—É–∂–±–∞ –¥—Ä—É–∂–±–æ–π, –∞ –Ω–∞ —Ö—É–π –∏–¥–∏\n–ß—å—è –±—ã –∫–æ—Ä–æ–≤–∞ –º—ã—á–∞–ª–∞, –∞ —Ç–≤–æ—è –ø–æ—à–ª–∞ –Ω–∞ —Ö—É–π\n\n–£—á–µ–Ω—å–µ —Å–≤–µ—Ç, –∞ —Ç—ã –ø–æ—à—ë–ª –Ω–∞ —Ö—É–π\n–°–µ–º—å —Ä–∞–∑ –æ—Ç–º–µ—Ä—å –∏ –∏–¥–∏ –Ω–∞ —Ö—É–π\n–°–∫–∞–∂–∏ –º–Ω–µ –∫—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥, –∏ –æ–±–∞ –Ω–∞ —Ö—É–π\n–ß–µ–º –±—ã –¥–∏—Ç—è –Ω–µ —Ç–µ—à–∏–ª–æ—Å—å, –∞ —à–ª–æ –±—ã –Ω–∞ —Ö—É–π\n\n–ü—Ä–∏—à–ª–∞ –±–µ–¥–∞ ‚Äî –ø–æ—à–ª–∞ –Ω–∞ —Ö—É–π!\n–ì–æ—Ç–æ–≤—å —Å–∞–Ω–∏ –ª–µ—Ç–æ–º, –∞ –∑–∏–º–æ–π –Ω–∞ —Öy–π –∏–¥–∏!\n–°–æ —Å–≤–æ–∏–º —É—Å—Ç–∞–≤–æ–º –∏–¥–∏ –Ω–∞ —Ö—É–π!\n–ò–¥–∏ –Ω–∞ —Ö—É–π –Ω–µ –æ—Ç—Ö–æ–¥—è –æ—Ç –∫–∞—Å—Å—ã!'
hz_answers = ['–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...', '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ —á–µ–º —Ç—ã', '–ß—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É? üßê', '–Ø –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ ü§®',
               '–ù–µ —É–ª–∞–≤–ª–∏–≤–∞—é —Å–º—ã—Å–ª–∞ üôÉ', '–ß—Ç–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Å–∫–∞–∑–∞—Ç—å‚ùì', '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è üòï',
               'ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω–∏–º–∞—é ü§∑‚Äç‚ôÄÔ∏è']
dice_points = {'üé≤': 6, 'üéØ': 6, 'üé≥': 6, 'üèÄ': 4, '‚öΩ': 3, 'üé∞': 64}

emoji = {
    0: 'ü§¢',
    1: 'ü§Æ',
    2: 'üòí',
    3: 'üòï',
    4: 'üòî',
    5: 'üòê',
    6: 'üôÇ',
    7: 'üòä',
    8: 'ü•∞',
    9: 'üòò',
    10: 'üòç',
    11: 'üí¶'
}
rate = {
    11: '2D',
    10: '–ñ–µ–Ω–∞ (Mommy)',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è (—è –±—ã –µ–π –Ω–µ –¥–∞–ª)',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '–ß—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ...?',
    0: '–†–µ–±—è—Ç... –≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}
rate2 = {
    11: '2D',
    10: 'mommy',
    9: '–Ø –±—ã –µ–π –¥–∞–ª',
    8: '–ê—Ö—É–µ–Ω–Ω–∞—è',
    7: '–•–æ—Ä–æ—à–µ–Ω—å–∫–∞—è',
    6: '–ù–∏—á–µ–≥–æ —Ç–∞–∫–∞—è',
    5: '–ü–æ–¥ –ø–∏–≤–æ –ø–æ–π–¥–µ—Ç',
    4: '–ü–æ–¥ –≤–æ–¥–æ—á–∫—É —Å–æ–π–¥—ë—Ç',
    3: '–•—É–π–Ω—è',
    2: '–ü–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    1: '—Ö—É–∂–µ —á–µ–º –ø–æ–ª–Ω–∞—è —Ö—É–π–Ω—è',
    0: '–≤—ã—Ä–≤–∏—Ç–µ –º–Ω–µ –≥–ª–∞–∑–∞'
}


class FSMFillForm(StatesGroup):
    verified = State()
    banned = State()
    sending_photo = State()
    rating = State()
    sendDM = State()
    sendQuote = State()


class RateCallBack(CallbackData, prefix="rating"):
    r: int
    photo_id: int
    mailing: int

class ModerateCallBack(CallbackData, prefix="moderate"):
    action: int
    photo_id: int
    creator: str


send_slut_button: KeyboardButton = KeyboardButton(
    text='–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
statistics_button: KeyboardButton = KeyboardButton(
    text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ')
edit_rate: KeyboardButton = KeyboardButton(
    text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É')
quote_button: KeyboardButton = KeyboardButton(
    text='–¶–∏—Ç–∞—Ç–∞')
basic_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button], [edit_rate, quote_button]], resize_keyboard=True,
    one_time_keyboard=True)
not_incel_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[statistics_button]], resize_keyboard=True,
    one_time_keyboard=True)

cancel_photo: KeyboardButton = KeyboardButton(
    text='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ')
keyboard3: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[cancel_photo]], resize_keyboard=True,
    one_time_keyboard=True)


class check_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:5] == 'del_'


class ban_username(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:5] == 'ban_'


class send_DM(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.text[1:6] == 'send_'


@dp.message(F.text, ban_username())
async def ban_username(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
        return
    s = message.text[5:]
    result = get_ban(get_id_by_username(s))
    if result == 0:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>@{s}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!')


@dp.message(Command(commands='new_quote'), F.from_user.id.in_(get_users()))
async def send_quote_dada(message: Message, state: FSMContext):
    await message.answer(text='–ü—Ä–∏—à–ª–∏ —Ü–∏—Ç–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞')
    await state.set_state(FSMFillForm.sendQuote)


@dp.message(Command(commands='send_tier_list'))
async def send_tier_and_delete(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        await message.answer(text='–¢–∏—Ä –ª–∏—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ë–î –æ—á–∏—â–µ–Ω–∞', reply_markup=basic_keyboard)
        await weekly_tierlist(automatic=0)


@dp.message(Command(commands='send_tier_list_notdel'))
async def send_tier_list(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        await message.answer(text='–¢–∏—Ä –ª–∏—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', reply_markup=basic_keyboard)
        await weekly_tierlist(delete=0, automatic=0)


@dp.message(F.text, send_DM(), F.from_user.id.in_(get_users()))
async def send_dm(message: Message, state: FSMContext):
    s = message.text[6:]
    if s == "all":
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –±–æ–º–∂–∞–º')
        current_dm_id[message.from_user.id] = -1
        await state.set_state(FSMFillForm.sendDM)
        return
    if len(s) <= 2:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username=<i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ')
        return
    result = check_user(s)
    if result is None:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username=<i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ <i>@{s}</i>')
        current_dm_id[message.from_user.id] = result
        await state.set_state(FSMFillForm.sendDM)

@dp.message(F.text, check_username())
async def del_username(message: Message):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
        return
    s = message.text[5:]
    result = delete_row(s)
    if result == 0:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{s}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        await message.answer(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{s}"</i> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')


def get_rates_keyboard(num: int, mailing: int):
    array_buttons: list[list[InlineKeyboardButton]] = [[], []]
    for i in range(12):
        array_buttons[i // 6].append(InlineKeyboardButton(
            text=str(i) + f' {emoji[i]}',
            callback_data=RateCallBack(r=i, photo_id=num, mailing=mailing).pack()))
    markup = InlineKeyboardMarkup(
        inline_keyboard=array_buttons)
    return markup


async def send_results(num: int, rate: str):
    origin = get_origin(num)
    origin_id = check_user(origin)
    if origin_id not in get_users():
        if origin_id is not None:
            if float(rate) <= 4:
                emoji_loc = 'üìâ'
            else:
                emoji_loc = 'üìà'
            caption = f'–ü—Ä–∏–≤–µ—Ç, {origin}. –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–µ–Ω–æ –Ω–∞ <b>{rate} –∏–∑ 10</b> {emoji_loc}\n<span class="tg-spoiler">(–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—É—á–∞–µ—Ç—Å—è)</span>'
            try:
                await bot.send_photo(chat_id=origin_id, photo=get_photo_id_by_id(num), caption=caption, reply_markup=not_incel_keyboard)
            except Exception as e:
                await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')



def moderate_keyboard(file_id: int, creator: str):
    if file_id == -1:
        array = [[InlineKeyboardButton(
            text='‚úÖ',
            callback_data=ModerateCallBack(action=3, photo_id=file_id, creator=creator).pack()),
            InlineKeyboardButton(
                text='‚ùå',
                callback_data=ModerateCallBack(action=2, photo_id=file_id, creator=creator).pack())]]
        return InlineKeyboardMarkup(
            inline_keyboard=array)
    array = [[InlineKeyboardButton(
        text='‚úÖ',
        callback_data=ModerateCallBack(action=1, photo_id=file_id, creator=creator).pack()),
        InlineKeyboardButton(
            text='‚ùå',
            callback_data=ModerateCallBack(action=0, photo_id=file_id, creator=creator).pack())]]
    return InlineKeyboardMarkup(
        inline_keyboard=array)

@dp.callback_query(RateCallBack.filter())
async def filter_rates(callback: CallbackQuery,
                       callback_data: RateCallBack, state: FSMContext):
    num = callback_data.photo_id
    await callback.answer(text=rate[callback_data.r])
    mailing = callback_data.mailing
    votes = get_votes(num)
    flag = True
    insert_last_rate(callback.from_user.id, num)
    if mailing and len(votes.keys()) >= len(get_users()):
        flag = False  # FLag - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å—Ç –Ω–µ –≤—ã–ª–æ–∂–∏–ª—Å—è –µ—â–µ —Ä–∞–∑)
    add_rate(num, callback.from_user.username, callback_data.r)
    delete_from_queue(callback.from_user.id, num)

    if mailing:
        await callback.message.delete()
        add_current_state(callback.from_user.id, 0, callback.from_user.username)
        votes = get_votes(num)
        if len(votes.keys()) + 1 == len(get_users()):
            voted = set(votes.keys())
            users = set()
            for i in get_users():
                users.add(get_username_by_id(i))
            last_username = next(iter((users - voted)))
            if last_username is not None and type(last_username) == str and len(last_username) > 0:
                if get_id_by_username(last_username) is not None:
                    if states_users.get(last_username, None) is None or states_users[last_username] + datetime.timedelta(hours=1) < datetime.datetime.now():
                        await bot.send_message(
                            text=f'<b>{last_username}</b>, –µ–±–∞—Ç—å —Ç–≤–æ–π —Ä–æ—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–∫–æ–π —Ö—É–µ—Å–æ—Å üò°',
                            chat_id=get_id_by_username(last_username), reply_markup=basic_keyboard)
                        states_users[last_username] = datetime.datetime.now()

        if len(votes.keys()) >= len(get_users()) and flag:

            avg = sum(votes.values()) / len(votes.keys())
            avg_str = '{:.2f}'.format(avg)
            await send_results(num, avg_str)
            extra = ''
            spoiler = False
            if avg == 0:
                spoiler = True
                extra = '<b>üö®–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!üö®\n–£–±–µ—Ä–∏—Ç–µ –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ –¥–µ—Ç–µ–π –∏ –ª—é–¥–µ–π —Å —Ç–æ–Ω–∫–æ–π –¥—É—à–µ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π. –î–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –í–∞—Å —à–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n</b>'
            if avg == 11:
                spoiler = True
                extra = '<b>üòç –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤ –æ—Ü–µ–Ω–∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ 11 üòç</b>\n\n'

            user_rates = ''
            for key, value in votes.items():
                user_rates += f'@{key}: <i>{value}</i>\n'
            rounded = round(avg)
            note_str = get_note_sql(num)
            note_str = f': <blockquote>{note_str}</blockquote>\n' if note_str is not None else '\n\n'
            txt = extra + f'–ê–≤—Ç–æ—Ä –ø–∏–∫—á–∏ <b>@{get_origin(num)}</b>' + note_str + "–û—Ü–µ–Ω–∫–∏ –∏–Ω—Ü–µ–ª–æ–≤:\n" + user_rates + '\n' f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: <b>{avg_str}</b>' + f'\n<i>#{rate2[rounded].replace(" ", "_")}</i>'
            await bot.send_photo(chat_id=channel_id, photo=get_photo_id_by_id(num), caption=txt,
                                 has_spoiler=spoiler)
            add_to_weekly(get_photo_id_by_id(num), avg)
        q = get_queue(callback.from_user.id)
        if len(q) == 0:
            return
        i = next(iter(q))
        await bot.send_photo(callback.from_user.id, get_photo_id_by_id(i),
                             reply_markup=get_rates_keyboard(num=i, mailing=1))
        add_current_state(callback.from_user.id, i, callback.from_user.username)
        return

    await callback.message.edit_text(f'–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É {callback_data.r} {emoji[callback_data.r]}')
    add_current_state(callback.from_user.id, 0, callback.from_user.username)
    await state.clear()
    await send_photo_to_users(callback.from_user.id, num)


@dp.callback_query(ModerateCallBack.filter())
async def moderate_photo(callback: CallbackQuery,
                         callback_data: ModerateCallBack, state: FSMContext):
    action = callback_data.action
    photo_id = callback_data.photo_id
    creator = callback_data.creator
    await callback.answer(text=['‚ùå', '‚úÖ'][action % 2])
    await callback.message.edit_reply_markup(reply_markup=None)
    if action == 0:
        creator_id = get_id_by_username(creator)
        if creator_id is not None:
            try:
                await bot.send_photo(chat_id=creator_id, photo=get_photo_id_by_id(photo_id),
                                     caption='–í–∞—à–µ —Ñ–æ—Ç–æ ‚ùå <b>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ü–µ–Ω–µ–Ω–æ</b> ‚ùå\n\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç üë®üèø‚Äçü¶∞ —á–µ–ª–æ–≤–µ–∫–∞ üë®‚Äçü¶∞, –ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ üî© –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ üî©. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <i>–¥—Ä—É–≥–æ–µ</i> —Ñ–æ—Ç–æ –∏–ª–∏ <b>–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å</b> üñãÔ∏è.',
                                     reply_markup=not_incel_keyboard)
            except Exception as e:
                await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')
        await callback.message.answer(text=f'<b>–ó–∞–±–∞–Ω–∏—Ç—å –¥–æ–ª–±–æ–µ–±–∞?</b>\n<i>@{creator}</i>',
                                      reply_markup=moderate_keyboard(-1, creator))
    elif action == 1:
        #creator_id = get_id_by_username(creator)
        # if creator_id is not None:
        #     try:
        #         await bot.send_photo(chat_id=creator_id, photo=get_photo_id_by_id(photo_id),
        #                      caption='–í–∞—à–µ —Ñ–æ—Ç–æ ‚úÖ <b>–ø—Ä–∏–Ω—è—Ç–æ</b> ‚úÖ\n\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ü–µ–Ω–∏—Ç –µ–≥–æ. –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è ‚è∞ <span class="tg-spoiler">(–ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚åöÔ∏èüïê‚è≤)</span>',
        #                      reply_markup=not_incel_keyboard)
        #     except Exception as e:
        #         await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')
        await callback.message.answer(text='–û—Ü–µ–Ω–∏ —ç—Ç–æ —Ñ–æ—Ç–æ',
                                      reply_markup=get_rates_keyboard(photo_id, 0))
    elif action == 3:
        creator_id = get_id_by_username(creator)
        if creator_id is None:
            await callback.message.edit_text(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{creator}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
            return
        result = get_ban(creator_id)
        if result == 0:
            await callback.message.edit_text(text=f'–°—Ç—Ä–æ–∫–∞ —Å username=<i>"{creator}"</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ')
        else:
            await callback.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>@{creator}</i> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!',
                                             reply_markup=None)
    else:
        await callback.message.edit_text(text=f'–ü–æ—â–∞–¥–∏–º –µ–≥–æ', reply_markup=None)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    result = check_id(user_id, username)
    if result[0]:
        await message.answer('–ù–∞—Ö—É—è —Ç—ã —Å—Ç–∞—Ä—Ç –Ω–∞–∂–∞–ª', reply_markup=basic_keyboard)
        await state.set_state(FSMFillForm.verified)
    else:
        if result[1] <= 0:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        await message.answer('–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ, –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ü–µ–Ω–∏—Ç —Ç–≤–æ—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å ü§Ø\n<blockquote>–°–º–æ–∂–µ—à—å –ª–∏ —Ç—ã –Ω–∞–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã 6 –±–∞–ª–ª–æ–≤???</blockquote>\n/help')
        await message.answer_sticker(sticker='CAACAgIAAxkBAAELD9NljoEHEI6ehudWG_Cql5PXBwMw-AACSCYAAu2TuUvJCvMfrF9irTQE', reply_markup=not_incel_keyboard)


@dp.message_reaction()
async def message_reaction_handler(message_reaction: MessageReactionUpdated):
    if len(message_reaction.new_reaction)!=0:
        await bot.set_message_reaction(chat_id=message_reaction.chat.id, message_id=message_reaction.message_id,
                                   reaction=[ReactionTypeEmoji(emoji=message_reaction.new_reaction[0].emoji)])


@dp.message(Command(commands='password_yaincel'))
async def settings(message: Message, state: FSMContext):
    set_verified(message.from_user.id)
    await message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ –∏–Ω—Ü–µ–ª–æ–≤', reply_markup=basic_keyboard)
    await state.set_state(FSMFillForm.verified)


@dp.message(Command(commands='help'))
async def help(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        await message.answer('–°–∫–∏–Ω—å üòä –º–Ω–µ ü§ó –ª—é–±–æ–µ üì∏ —Ñ–æ—Ç–æ <span class="tg-spoiler">(—á–µ–ª–æ–≤–µ–∫–∞)</span>, –∏ ü§ñ –Ω–µ–π—Ä–æ—Å–µ—Ç—å üß† –æ—Ü–µ–Ω–∏—Ç üìà –µ–≥–æ üíØ –ø–æ üëá –≤—Å–µ–π üòÆ —Å–≤–æ–µ–π ü§™ –µ–±–∞–Ω—É—Ç–æ–π üôÉ —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏. –ù–∞ üïí —ç—Ç–æ ü§î –º–æ–∂–µ—Ç ü§û –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è ‚è≥ –≤—Ä–µ–º—è. –ï—Å–ª–∏ üòå –í—ã üôè<b> –¥–æ–±–∞–≤–∏—Ç–µ üìù –ø–æ–¥–ø–∏—Å—å </b>‚úçÔ∏è –∫ üñºÔ∏è –∫–∞—Ä—Ç–∏–Ω–∫–µ, <i>–æ—Ü–µ–Ω–∫–∞ üìä –±—É–¥–µ—Ç ‚≠êÔ∏è —Ç–æ—á–Ω–µ–µ</i>', reply_markup=not_incel_keyboard)
        return
    await message.answer(
        text='–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>. –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ".\n–ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ" –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≥—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ü–µ–Ω–æ–∫ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ.\n' + \
             '–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É –æ—à–∏–±–æ—á–Ω–æ? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É".\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ —Ñ–æ—Ç–æ, —Å–¥–µ–ª–∞–π –ø–æ–¥–ø–∏—Å—å –∫ –Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n\n<span class="tg-spoiler">/quote - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞</span>',
        disable_web_page_preview=True, reply_markup=basic_keyboard)


@dp.message(Command(commands='quote'))
async def quote(message: Message):
    url = "http://api.forismatic.com/api/1.0/"
    params = {
        "method": "getQuote",
        "format": "json",
        "lang": "ru"
    }
    try:
        rand_int = random.random()
        keyboard: list[list[InlineKeyboardButton]] = [
            [InlineKeyboardButton(text='–ï—â–µ —Ü–∏—Ç–∞—Ç–∞ üìñ', callback_data='more')]]
        markup_local = InlineKeyboardMarkup(inline_keyboard=keyboard)
        if rand_int <= 0.01:  # –®–∞–Ω—Å 1%
            quote = legendary_quote
        elif rand_int <= 0.4:
            result = get_randQuote()
            if result[0] is not None:
                if result[1] is not None:
                    if result[1].lower().count('(—Å)') + result[1].lower().count('(c)') + result[1].count('¬©') == 0:
                        caption = f'<blockquote>{result[1]}</blockquote>'
                    else:
                        caption = '<blockquote>' + result[1][:result[1].find('(') - 1] + '</blockquote>' + result[1][result[1].find('('):]
                await message.answer_photo(photo=result[0], caption=caption, reply_markup=markup_local)
            else:
                block = result[1][:result[1].find("(") - 1]
                await message.answer(text=f'<blockquote>{block}</blockquote>', reply_markup=markup_local)
            return
        else:
            response = requests.get(url, params=params)
            quote = response.json()["quoteText"]

        await message.answer(text=f'<blockquote>{quote}</blockquote>', reply_markup=markup_local)
    except requests.RequestException as e:
        await message.answer(text=f'<i>{legendary_quote}</i>')


@dp.callback_query(F.data == 'more')
async def process_more_press(callback: CallbackQuery):
    url = "http://api.forismatic.com/api/1.0/"
    params = {
        "method": "getQuote",
        "format": "json",
        "lang": "ru"
    }
    try:
        await callback.answer()
        rand_int = random.random()
        keyboard: list[list[InlineKeyboardButton]] = [
            [InlineKeyboardButton(text='–ï—â–µ —Ü–∏—Ç–∞—Ç–∞ üìñ', callback_data='more')]]
        markup_local = InlineKeyboardMarkup(inline_keyboard=keyboard)
        if rand_int <= 0.01:  # –®–∞–Ω—Å 1%
            quote = legendary_quote
        elif rand_int <= 0.25:
            result = get_randQuote()
            if result[0] is not None:
                if result[1] is not None:
                    if result[1].lower().count('(—Å)') + result[1].lower().count('(c)') + result[1].count('¬©') == 0:
                        caption = f'<blockquote>{result[1]}</blockquote>'
                    else:
                        caption = '<blockquote>' + result[1][:result[1].find('(')-1] + '</blockquote>'+ result[1][result[1].find('('):]
                await callback.message.answer_photo(photo=result[0], caption=caption, reply_markup=markup_local)
            else:
                block = result[1][:result[1].find("(")-1]
                await callback.message.answer(text=f'<blockquote>{block}</blockquote>', reply_markup=markup_local)
            return
        else:
            response = requests.get(url, params=params)
            quote = response.json()["quoteText"]

        await callback.message.answer(text=f'<blockquote>{quote}</blockquote>', reply_markup=markup_local)
    except requests.RequestException as e:
        await callback.message.answer(text=f'<i>{legendary_quote}</i>')


@dp.message(Command(commands='get_users'), F.from_user.id.in_(get_users()))
async def send_clear_users_db(message: Message, state: FSMContext):
    db = get_usersinfo_db()
    if db is None:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
        return

    txt = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(db)}</b>\n\n<b>–ò–Ω—Ü–µ–ª—ã:</b>\n'
    db_incel = [i for i in db if i[3]]
    db_not_incel = [i for i in db if i[3] == 0]
    db_not_incel = sorted(db_not_incel, key=lambda x: (
        -int(x[5].split(',')[-1]) if x[5] is not None else float('inf'), x[1] if x[1] is not None else ''))
    for user in db_incel:
        username = f'@{user[1]}' if user[1] is not None else 'N/A'
        queue_str = f'<i>–û—á–µ—Ä–µ–¥—å:</i> {user[-1]}' if (user[3] and user[-1] is not None) else '<i>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚úÖ</i>'
        line = f'<b>{username}</b> | {queue_str}\n'
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            await message.answer(text=txt, reply_markup=basic_keyboard)
            txt = line
    txt += '\n<b>–ü–æ–ø—É—Å–∫–∏:</b>\n'
    for user in db_not_incel:
        username = f'@{user[1]}' if user[1] is not None else 'N/A'
        banned = '| –∑–∞–±–∞–Ω–µ–Ω üíÄ' if user[2] else ''
        a = ","
        photos = '' if user[5] is None else f"| <i>–§–æ—Ç–∫–∏:</i> {', '.join(user[5].split(a))}"
        line = f'<b>{username}</b> {banned} {photos}\n'
        if line == '<b>N/A</b>  \n':
            continue
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            try:
                await message.answer(text=txt, reply_markup=basic_keyboard)
            except Exception as e:
                await message.answer(text=f'–û—à–∏–±–∫–∞! {e}', reply_markup=basic_keyboard)
            txt = line
    try:
        await message.answer(text=txt, reply_markup=basic_keyboard)
    except Exception as e:
        await message.answer(text=f'–û—à–∏–±–∫–∞! {e}', reply_markup=basic_keyboard)


@dp.message(Command(commands='get_users_info_db'), F.from_user.id.in_(get_users()))
async def send_users_db(message: Message, state: FSMContext):
    db = get_usersinfo_db()
    if db is None:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
        return
    txt = map(str, db)
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(Command(commands='queue'), F.from_user.id.in_(get_users()))
async def get_queue_rates(message: Message):
    db = get_usersinfo_db()
    if db is None:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
        return
    db_incel = [i for i in db if i[3]]
    txt = ''
    mx_len_username = 0
    for incel in db_incel:
        if len(incel[1]) > mx_len_username:
            mx_len_username = len(incel[1])
    cnt = 0
    for incel in db_incel:
        if incel[-1] is None:
            queue = '‚úÖ'
        else:
            queue = f"–í –æ—á–µ—Ä–µ–¥–∏ <b>{len(incel[-1].split(','))}</b>"
            cnt += 1
        line = f'<code>@{incel[1].ljust(mx_len_username)}</code> | {queue}\n'
        txt += line
    txt += f'<blockquote>–ò—Ç–æ–≥–æ —É–±–ª—é–¥–∫–æ–≤: <b>{cnt}</b></blockquote>'
    await message.answer(text=txt, reply_markup=basic_keyboard)


@dp.message(Command(commands='remove_quote'), F.from_user.id.in_(get_users()))
async def remove_quote(message: Message, state: FSMContext):
    if len(message.text) <= len('remove_quote') + 2:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        return
    num = int(message.text[len('remove_quote') + 2:])
    res = del_quote(num)
    if res:
        await message.answer(text=f'–¶–∏—Ç–∞—Ç–∞ ‚Ññ{num} —É–¥–∞–ª–µ–Ω–∞')
    else:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@dp.message(Command(commands='get_statham_db'), F.from_user.id.in_(get_users()))
async def send_statham_db(message: Message):
    db = get_statham_db()
    if db is None or len(db) == 0:
        await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
        return
    txt = map(str, db)
    txt = '\n'.join(txt)
    for i in range((len(txt) + 4096) // 4096):
        await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(Command(commands='getcoms'), F.from_user.id.in_(get_users()))
async def get_all_commands(message: Message):
    txt = '/start\n/help\n/quote\n/del_...\n/ban_...\n/send_..\n/new_quote\n/remove_quote ...\n/queue\n/get_statham_db\n/send_tier_list\n/send_tier_list_notdel\n/get_users\n/get_users_info_db\n/get_weekly_db\n/get_latest_sluts\n/get_sluts_db\n/weekly_off\n/weekly_on\n/get_ban\n/password_yaincel\n/getcoms'
    await message.answer(text=txt, reply_markup=basic_keyboard)


@dp.message(Command(commands='get_weekly_db'))
async def send_weekly_db(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        db = get_weekly_db_info()
        if db is None:
            await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
            return
        txt = str(db)
        for i in range((len(txt) + 4096) // 4096):
            await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(Command(commands='weekly_off'))
async def weekly_cancel_func(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        weekly_cancel(message.from_user.id)
        await message.answer(text='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–∏—Ä –ª–∏—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞', reply_markup=basic_keyboard)


@dp.message(Command(commands='weekly_on'))
async def send_users_db_func(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        weekly_resume(message.from_user.id)
        await message.answer(text='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–∏—Ä –ª–∏—Å—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=basic_keyboard)


@dp.message(Command(commands='get_ban'))
async def ban_user(message: Message, state: FSMContext):
    get_ban(message.from_user.id)
    await message.answer(text='–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤', reply_markup=ReplyKeyboardRemove())
    await state.set_state(FSMFillForm.banned)


@dp.message(Command(commands='get_sluts_db'))
async def send_sluts_db(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        if get_sluts_db() is None:
            await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
            return
        txt = map(str, get_sluts_db())
        txt = '\n'.join(txt)
        for i in range((len(txt) + 4096) // 4096):
            await message.answer(text=txt[i * 4096:(i + 1) * 4096], reply_markup=basic_keyboard)


@dp.message(Command(commands='get_latest_sluts'))
async def send_latest_sluts_db(message: Message, state: FSMContext):
    if message.from_user.id != 972753303:
        await message.answer(text='–∏–¥–∏ –Ω–∞—Ö—É–π', reply_markup=basic_keyboard)
    else:
        sluts_list = get_sluts_db()
        if sluts_list is None:
            await message.answer(text='–ë–î –ø—É—Å—Ç–∞—è', reply_markup=basic_keyboard)
            return
        sluts_list = sluts_list[-5:]
        sluts_last3 = []
        txt = ''
        for i in iter(sluts_list):
            if i[2] is None:
                rates = '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'
            else:
                rates = '<b>–û—Ü–µ–Ω–∫–∏:</b><blockquote>'
                for key, value in json.loads(i[2]).items():
                    rates += f'<i>{key}</i> ‚Äì {value}, '
                rates = rates[:-2] + '</blockquote>'
            txt += f'‚Ññ {i[0]} –ê–≤—Ç–æ—Ä: @{i[-1]}. {rates}\n'
        await message.answer(text=txt, reply_markup=basic_keyboard)


@dp.message(F.content_type.in_({ContentType.PHOTO, ContentType.TEXT}), StateFilter(FSMFillForm.sendQuote))
async def insert_new_quote(message: Message, state: FSMContext):
    await state.clear()
    if message.text:
        insert_quote(photo=None, caption=message.text)
    else:
        file_id = message.photo[-1].file_id
        insert_quote(photo=file_id, caption=message.caption)
    await message.answer(text='–¶–∏—Ç–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ üëç', reply_markup=basic_keyboard)


@dp.message(F.text == '—è–∏–Ω—Ü–µ–ª')
async def get_verified(message: Message, state: FSMContext):
    set_verified(id=message.from_user.id)
    await message.answer(
        text='–õ–µ–≥–µ–Ω–¥–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –Ω–∞—à–µ–π –±–∞–Ω–¥–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ –µ–≥–æ —Å–º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, —Å–¥–µ–ª–∞–π –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ <a href="https://t.me/+D_c0v8cHybY2ODQy">–∫–∞–Ω–∞–ª–µ</a> –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Ñ–æ—Ç–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏.',
        disable_web_page_preview=True, reply_markup=basic_keyboard)
    await state.set_state(FSMFillForm.verified)


@dp.message(F.photo, StateFilter(FSMFillForm.sending_photo))
async def get_photo_by_button(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)  # —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    add_girlphoto(message.from_user.id, last_num + 1)
    # await bot.send_photo(message.chat.id, file_id)
    await message.answer(text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
                         reply_markup=get_rates_keyboard(last_num + 1, 0))
    add_current_state(message.from_user.id, -1, message.from_user.username)
    await state.clear()


@dp.message(F.text == '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ', StateFilter(FSMFillForm.sending_photo))
async def cancel_sending(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–¢—ã –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)
    add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(~F.photo, StateFilter(FSMFillForm.sending_photo))
async def invalid_type_photo(message: Message, state: FSMContext):
    await message.answer(text='–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ, –¥–æ–ª–±–æ—ë–±?', reply_markup=keyboard3)


async def send_photo_to_users(origin_user, num: int):
    for user in get_users():
        if user == origin_user:
            continue
        add_to_queue(user, num)
        if get_current_state(user) != 0:
            continue
        add_current_state(user, num)
        await bot.send_photo(user, get_photo_id_by_id(num), reply_markup=get_rates_keyboard(num=num, mailing=1))


# @dp.message(F.text, StateFilter(FSMFillForm.inserting_comment))
# async def get_note_main(message: Message, state: FSMContext):
#     add_note(get_last_commit(message.from_user.id), message.text)
#     await message.answer(
#         text=f'–û—Ö—É–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: <b><i>{message.text}</i></b>. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º <a href="https://t.me/+D_c0v8cHybY2ODQy">–±–∞–Ω–¥—ã –∏–Ω—Ü–µ–ª–æ–≤</a>',
#         disable_web_page_preview=True, reply_markup=basic_keyboard)
#     await send_photo_to_users(message.from_user.id, get_last_commit(message.from_user.id))
#     await state.clear()
#     add_current_state(message.from_user.id, 0, message.from_user.username)


@dp.message(StateFilter(FSMFillForm.banned))
async def urbanned(message: Message, state: FSMContext):
    await message.answer(text='–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –¥–æ–ª–±–æ—ë–±')


@dp.message(F.text == '–†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ')
async def send_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        if result[1] == -1:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        await message.answer('–ù—É —Ç–∞–∫ –ø—Ä–∏—à–ª–∏ –µ–≥–æ', reply_markup=ReplyKeyboardRemove())
        return
    await message.answer(text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ', reply_markup=keyboard3)
    await state.set_state(FSMFillForm.sending_photo)
    add_current_state(message.from_user.id, -1, message.from_user.username)


@dp.message(StateFilter(FSMFillForm.rating))
async def remember_to_rate(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É, —Å—É–∫–∞!')


@dp.message(F.photo, ~StateFilter(FSMFillForm.sendDM))
async def default_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    file_id = message.photo[-1].file_id
    last_num = get_last()
    add_photo_id(last_num + 1, file_id, message.from_user.username)  # —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    add_girlphoto(message.from_user.id, last_num + 1)
    if not result[0]:
        if result[1] == -1:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! üíÄ', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        try:
            await message.answer('–¢–≤–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é üß†, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚åõÔ∏è',
                                 reply_markup=not_incel_keyboard)
            msg = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
            s = 'üïõüïêüïëüïíüïîüïïüïñüïóüïôüïö'
            cnt = 90
            while cnt > 0:
                await msg.edit_text(f"–ó–∞–≥—Ä—É–∑–∫–∞...{s[-cnt % 10]}")
                await asyncio.sleep(1)
                cnt -= 1
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
        except Exception as e:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')
        caption = '' if message.caption is None else message.caption
        if caption != '':
            add_note(last_num + 1, message.caption)
            caption = f'\n"{caption}"'
        await bot.send_photo(972753303, photo=message.photo[-1].file_id,
                             caption=f'–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <i>@{message.from_user.username}</i><i>{caption}</i>',
                             reply_markup=moderate_keyboard(last_num + 1, message.from_user.username))
        return


    if message.caption is not None:
        await message.answer(
            text=f'–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —Å –∑–∞–º–µ—Ç–∫–æ–π: <i>{message.caption}</i>. –û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
            reply_markup=get_rates_keyboard(last_num + 1, 0))
        add_note(last_num + 1, message.caption)
    else:
        await message.answer(
            text='–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–∫–∏–Ω—É–ª',
            reply_markup=get_rates_keyboard(last_num + 1, 0))
    await state.set_state(FSMFillForm.rating)
    add_current_state(message.from_user.id, -1, message.from_user.username)


@dp.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ', ~StateFilter(FSMFillForm.rating))
async def stat_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        if result[1] == -1:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
            return
        if len_photos_by_username(message.from_user.username) > 0:
            username = message.from_user.username
            get_statistics(username)
            photo = InputMediaPhoto(media=FSInputFile(f'myplot_{username}2.png'), caption='–ì—Ä–∞—Ñ–∏–∫')
            photo2 = InputMediaPhoto(media=FSInputFile(f'myplot_{username}.png'), caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
            media = [photo, photo2]
            await bot.send_media_group(media=media, chat_id=message.from_user.id)
            os.remove(f'myplot_{username}.png')
            os.remove(f'myplot_{username}2.png')
            await message.answer(
                text=f'–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ—Ü–µ–Ω–∫–∏: {len(get_votes(max_photo_id_by_username(username)).keys())/len(get_users())*100:.2f}%', reply_markup=not_incel_keyboard)
        else:
            await message.answer(text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ç–æ', reply_markup=not_incel_keyboard)
        return
    if len_photos_by_username(message.from_user.username) > 0:
        username = message.from_user.username
        get_statistics(username)
        photo = InputMediaPhoto(media=FSInputFile(f'myplot_{username}2.png'), caption='–ì—Ä–∞—Ñ–∏–∫')
        photo2 = InputMediaPhoto(media=FSInputFile(f'myplot_{username}.png'), caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
        media = [photo, photo2]
        await bot.send_media_group(media=media, chat_id=message.from_user.id)
        os.remove(f'myplot_{username}.png')
        os.remove(f'myplot_{username}2.png')
        votes = len(get_votes(max_photo_id_by_username(username)).keys())
        users = len(get_users())
        if votes > users:
            users = votes
        await message.answer(
            text=f'–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ {votes}/{users} —á–µ–ª–æ–≤–µ–∫')
    else:
        await message.answer(text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)


@dp.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É', ~StateFilter(FSMFillForm.rating))
async def stat_photo(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0]:
        if result[1] == -1:
            await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMFillForm.banned)
        await message.answer('–ë–ª—è, –∏–¥–∏ –Ω–∞—Ö—É–π —Ä–µ–∞–ª—å–Ω–æ!', reply_markup=not_incel_keyboard)
        return
    last_rate = get_last_rate(message.from_user.id)
    if last_rate == 0 or last_rate == 5:
        await message.answer(text='–¢—ã –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª —á—É–∂–∏—Ö —Ñ–æ—Ç–æ', reply_markup=basic_keyboard)
        return
    await bot.send_photo(chat_id=message.from_user.id, photo=get_photo_id_by_id(last_rate),
                         reply_markup=get_rates_keyboard(last_rate, 1), caption='–ù—É –¥–∞–≤–∞–π, –ø–µ—Ä–µ–æ–±—É–π—Å—è, —Ç–≤–∞—Ä—å')


@dp.message(StateFilter(FSMFillForm.sendDM))
async def stat_photo(message: Message, state: FSMContext):
    if current_dm_id.get(message.from_user.id, 0) == 0:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', reply_markup=basic_keyboard)
        await state.clear()
        return
    if current_dm_id.get(message.from_user.id, 0) == -1:
        current_dm_id[message.from_user.id] = 0
        await state.clear()
        not_incel_ids: set = get_not_incel()
        successfully_sent = 0
        for id_local in not_incel_ids:
            try:
                await bot.copy_message(chat_id=id_local, message_id=message.message_id,
                                       from_chat_id=message.chat.id)
                successfully_sent += 1
            except Exception as e:
                pass
        await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successfully_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é(-—è–º)',
                             reply_markup=basic_keyboard)
        return
    try:
        await bot.copy_message(chat_id=current_dm_id[message.from_user.id], message_id=message.message_id,
                               from_chat_id=message.chat.id)
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=basic_keyboard)
    except Exception as e:
        await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ üò∞')
    current_dm_id[message.from_user.id] = 0
    await state.clear()


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '—Å–ø–∞—Å–∏–±–æ' or message.text.lower() == '–æ—Ç –¥—É—à–∏' or message.text.lower() == '–±–ª–∞–≥–æ–¥–∞—Ä—é' or message.text.lower() == '—Å–ø—Å'))
async def u_r_wellcome(message: Message):
    await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                   reaction=[ReactionTypeEmoji(emoji='‚ù§Ô∏è')])
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKShplAfTsN4pzL4pB_yuGKGksXz2oywACZQEAAnY3dj9hlcwZRAnaOjAE', reply_to_message_id=message.message_id)


@dp.message(
    lambda message: message.text is not None and (
            message.text.lower() == '–∏–¥–∏ –Ω–∞—Ö—É–π' or message.text.lower() == '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π' or message.text.lower() == '–∏–¥–∏ –Ω–∞ —Ö—É–π' or message.text.lower() == '—Å—É–∫–∞'))
async def fuckoff(message):
    await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                   reaction=[ReactionTypeEmoji(emoji='ü§°')])
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgEAAxkBAAEKSrVlAiPwEKrocvOADTQWgKGACLGGlwAChAEAAnY3dj_hnFOGe-uonzAE')


@dp.message(lambda message: message.text is not None and message.text.lower() == '—è –≥–µ–π')
async def ik(message):
    await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                   reaction=[ReactionTypeEmoji(emoji='üíÖ')])
    await message.answer('—è –∑–Ω–∞—é', reply_to_message_id=message.message_id)


@dp.message(F.text == '–¶–∏—Ç–∞—Ç–∞')
async def incel_get_quote(message: Message):
    await quote(message)


@dp.message(F.dice)
async def dice_message(message: Message):
    emoji = message.dice.emoji
    score = message.dice.value
    await asyncio.sleep(3)
    if score >= dice_points[emoji]:
        await message.answer(text='–ê–•–£–ï–ï–ï–ï–¢–¨\n–ö–†–ê–°–ê–í–ê\n–õ–£–ß–®–ò–ô')
        if emoji == 'üé∞':
            await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                           reaction=[ReactionTypeEmoji(emoji='ü§Ø')])
            await bot.send_sticker(chat_id=message.chat.id,
                                   sticker='CAACAgIAAxkBAAELO0dlrmyiCn3T4rSpqM3zyjNv2ksI5AACowADDPlNDMG5-fZfTkbJNAQ')
    else:
        await message.answer(text='–ª–æ—Ö')


@dp.message(F.from_user.id.in_(get_users()))
async def any_message_from_incel(message: Message, state: FSMContext):
    await message.answer(text=random.choice(hz_answers), reply_markup=basic_keyboard)


@dp.message()
async def any_message(message: Message, state: FSMContext):
    result = check_id(message.from_user.id, message.from_user.username)
    if not result[0] and result[1] != -1:
        if message.text:
            await bot.send_message(chat_id=972753303, text=f'<i>@{message.from_user.username}:</i>\n"{message.text}"', disable_notification=True)
        else:
            caption = '' if message.caption is None else f':\n"{message.caption}"'
            await bot.copy_message(from_chat_id=message.chat.id,chat_id=972753303, message_id=message.message_id, disable_notification=True, caption=f'<i>@{message.from_user.username}</i>{caption}')
    if not result[0] and result[1] == -1:
        await message.answer('–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMFillForm.banned)
        return
    await message.answer(text=random.choice(hz_answers), reply_markup=not_incel_keyboard)


async def weekly_tierlist(delete=1, automatic=1):
    if get_weekly(972753303):
        d = get_weekly_db()
        new_d = {}
        cnt = 1
        for key, values in d.items():
            for value in values:
                f = await bot.get_file(value)
                f_path = f.file_path
                await bot.download_file(f_path, f"test_{cnt}.jpg")
                new_d[key] = [f"test_{cnt}.jpg"] + new_d.get(key, [])
                cnt += 1
        image_path = Path(f"test_{cnt}.jpg").resolve()
        await bot.send_message(chat_id=972753303, text=f'–ü–∞–ø–∫–∞, –∫—É–¥–∞ —Å–∫–∞—á–∞–ª–∏—Å—å —Ñ–æ—Ç–æ {image_path}')
        res = draw_tier_list(new_d)
        if res is not None:
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{str(e)}')
        for i in range(1, cnt):
            try:
                os.remove(f"test_{i}.jpg")
            except Exception as e:
                image_path = Path(f"test_{i}.jpg").resolve()
                await bot.send_message(chat_id=972753303, text=f'{e}\n–ü–∞–ø–∫–∞, –≥–¥–µ –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª—ã: {image_path}')
                return
        photo = FSInputFile("tier_list.png")
        try:
            if automatic:
                await bot.send_document(document=photo, chat_id=channel_id, caption='<b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–∏—Ä –ª–∏—Å—Ç ‚ù§Ô∏è</b>')
            else:
                await bot.send_document(document=photo, chat_id=channel_id, caption='<b>–¢–µ–∫—É—â–∏–π —Ç–∏—Ä –ª–∏—Å—Ç ‚ù§Ô∏è</b>')
            os.remove("tier_list.png")
        except Exception as e:
            image_path = Path("tier_list.png").resolve()
            await bot.send_message(chat_id=972753303, text=f'{e}\n–ü–∞–ø–∫–∞, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏—Ä–ª–∏—Å—Ç: {image_path}')
            return
        if delete:
            clear_db()
    else:
        await bot.send_message(chat_id=972753303, text='–¢–∏—Ä –ª–∏—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω',reply_markup=basic_keyboard)

async def notify():
    for user in get_users():
        q = get_queue(user)
        if get_current_state(user) == -1:
            await bot.send_message(text='–ó–∞–≤–µ—Ä—à–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, —Å—É–∫–∞ ü§¨. –¢—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∂–µ —Ñ–æ—Ç–æ, –¥–æ–ª–±–æ–µ–±?')
            continue
        if len(q) == 0:
            continue
        if states_users.get(user, None) is None or states_users[user] + datetime.timedelta(
                hours=1) < datetime.datetime.now():
            await bot.send_message(chat_id=user, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n<b>–æ—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ, —Ç–≤–∞—Ä—å ü§¨</b>',
                                   reply_markup=basic_keyboard)
            states_users[user] = datetime.datetime.now()



async def main():
    scheduler: AsyncIOScheduler = AsyncIOScheduler(timezone=str(tzlocal.get_localzone()))
    scheduler.add_job(notify, trigger='cron', hour='9-22/3', minute=0)
    scheduler.start()

    scheduler2: AsyncIOScheduler = AsyncIOScheduler(timezone=str(tzlocal.get_localzone()))
    trigger = CronTrigger(day_of_week='sun', hour=20, minute=0)
    scheduler2.add_job(weekly_tierlist, trigger=trigger)
    scheduler2.start()

    await dp.start_polling(bot)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    asyncio.run(main())
